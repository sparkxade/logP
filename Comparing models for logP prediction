{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "334985bc-f995-4435-a801-24f6b3e554cc",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "# Final Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d91bdcb2-93f6-4d07-87ec-8147c527255b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def dummy_npwarn_decorator_factory():\n",
    "  def npwarn_decorator(x):\n",
    "    return x\n",
    "  return npwarn_decorator\n",
    "np._no_nep50_warning = getattr(np, '_no_nep50_warning', dummy_npwarn_decorator_factory)\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import re\n",
    "\n",
    "from rdkit import Chem\n",
    "from rdkit.Chem import Descriptors, rdchem, AllChem, rdMolDescriptors, rdDistGeom, rdFingerprintGenerator\n",
    "from rdkit import DataStructs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9b44f7a-947d-4ef6-89a2-3619887088c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.linear_model import LinearRegression, ElasticNet\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_percentage_error, mean_absolute_error, confusion_matrix, root_mean_squared_error\n",
    "\n",
    "from mlxtend.feature_selection import SequentialFeatureSelector as SFS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "81ad58dc-a31b-48f2-84e3-851fd4ad947e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "\n",
    "import xgboost as xgb\n",
    "from pycaret.regression import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3276468-575b-4b01-929d-c1d9163af9d1",
   "metadata": {},
   "source": [
    "# Data Exploration & Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e35cf99-b572-49cd-b670-c54d805c35a5",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Import Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85f5307b-6c66-4049-9626-477528006531",
   "metadata": {},
   "source": [
    "I will use [SMILES DataSet for Analysis & Prediction Dataset](https://www.kaggle.com/datasets/yanmaksi/big-molecules-smiles-dataset/data) dataset from Kaggle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ccdc4ef9-912b-413d-9383-42c5e10d7db2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 16087 entries, 0 to 16086\n",
      "Data columns (total 5 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   SMILES     16087 non-null  object \n",
      " 1   pIC50      15037 non-null  float64\n",
      " 2   mol        16087 non-null  object \n",
      " 3   num_atoms  16087 non-null  int64  \n",
      " 4   logP       16087 non-null  float64\n",
      "dtypes: float64(2), int64(1), object(2)\n",
      "memory usage: 628.5+ KB\n"
     ]
    }
   ],
   "source": [
    "logP = pd.read_csv('SMILES_Big_Data_Set.csv')\n",
    "logP.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d44fdc8-2b82-4dd4-8889-ce60526b96a3",
   "metadata": {},
   "source": [
    "This dataset has 16087 molecules and their `SMILE` notation, `pIC50`, `RDkit mol` object, `number of atoms` and `logP`.\n",
    "\n",
    "Following is the description from the publisher:\n",
    "```\n",
    "\"pIC50\" - is a measurement used in pharmacology and drug discovery to assess the potency of a compound in inhibiting a specific biological target or enzyme\r\n",
    "\r\n",
    "\"mol\" - is a representation of a molecule in the RDKit library, which is a widely used cheminformatics software toolkit for working with molecular data. In this case, it indicates that the column \"mol\" contains RDKit Mol objects.\r\n",
    "\r\n",
    "\"num_atoms\" - refers to the number of atoms in a molecule. In the context of cheminformatics and molecular data analysis, the \"num_atoms\" attribute represents the count of atoms present in a molecule. Atoms are the fundamental units that make up molecules. They can be elements such as carbon (C), hydrogen (H), oxygen (O), nitrogen (N), and many others. The number of atoms in a molecule is an important property that can provide insights into its size, complexity, and potential chemical interactions.\r\n",
    "\r\n",
    "\"logP\" - is a measure of how a molecule interacts with different solvents. It indicates the molecule's preference for nonpolar (oily) or polar (water-like) environments. A higher logP value means the molecule is more likely to dissolve in oils and less likely to dissolve in water. This property is important in drug design as it affects a molecule's ability to be absorbed and distributed in th\n",
    "```\n",
    "My goal is to extract features from SMILE string and pre body"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a709b803-0d59-45b7-a3da-f2e02b1a9e01",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2a9c9fa2-088c-41fc-a01b-951c22e0a402",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SMILES</th>\n",
       "      <th>pIC50</th>\n",
       "      <th>mol</th>\n",
       "      <th>num_atoms</th>\n",
       "      <th>logP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6121</th>\n",
       "      <td>Cn1c([N+](=O)[O-])cnc1-c1ccc(F)cc1</td>\n",
       "      <td>0.01</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F19...</td>\n",
       "      <td>16</td>\n",
       "      <td>2.13440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6050</th>\n",
       "      <td>CCCC(=O)Oc1c(Br)cc(C#N)cc1Br</td>\n",
       "      <td>0.00</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F19...</td>\n",
       "      <td>16</td>\n",
       "      <td>3.78878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9966</th>\n",
       "      <td>CC(=O)OCCN(CCC#N)c1ccc(N=Nc2nc3ccc([N+](=O)[O-...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>31</td>\n",
       "      <td>4.90308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9097</th>\n",
       "      <td>CC(C)(O)C(=O)Nc1ccc([N+](=O)[O-])c(C(F)(F)F)c1</td>\n",
       "      <td>0.00</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>20</td>\n",
       "      <td>2.32300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15354</th>\n",
       "      <td>COC(=O)C(C)NP(=O)(OCC1C=CC(n2cc(C)c(=O)[nH]c2=...</td>\n",
       "      <td>0.00</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>36</td>\n",
       "      <td>2.67222</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                  SMILES  pIC50  \\\n",
       "6121                  Cn1c([N+](=O)[O-])cnc1-c1ccc(F)cc1   0.01   \n",
       "6050                        CCCC(=O)Oc1c(Br)cc(C#N)cc1Br   0.00   \n",
       "9966   CC(=O)OCCN(CCC#N)c1ccc(N=Nc2nc3ccc([N+](=O)[O-...   0.00   \n",
       "9097      CC(C)(O)C(=O)Nc1ccc([N+](=O)[O-])c(C(F)(F)F)c1   0.00   \n",
       "15354  COC(=O)C(C)NP(=O)(OCC1C=CC(n2cc(C)c(=O)[nH]c2=...   0.00   \n",
       "\n",
       "                                                     mol  num_atoms     logP  \n",
       "6121   <rdkit.Chem.rdchem.Mol object at 0x00000182F19...         16  2.13440  \n",
       "6050   <rdkit.Chem.rdchem.Mol object at 0x00000182F19...         16  3.78878  \n",
       "9966   <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         31  4.90308  \n",
       "9097   <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         20  2.32300  \n",
       "15354  <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         36  2.67222  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logP['mol'] = logP['SMILES'].apply(lambda x: Chem.MolFromSmiles(x)) # updating the mol column bc it's not working\n",
    "logP.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9995dda0-7589-41f4-8a3a-e1285011c3ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "def char_frequency(str):\n",
    "    dict = {}    \n",
    "    for n in str:\n",
    "        keys = dict.keys()\n",
    "        if n in keys:\n",
    "            dict[n] += 1\n",
    "        else:\n",
    "            dict[n] = 1\n",
    "    \n",
    "    return dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d18ea280-9fb6-4bc7-b665-3af92cefa429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['=', '(', ')', '-', '[', ']', '#', '+']\n"
     ]
    }
   ],
   "source": [
    "chars  = list(char_frequency(re.findall(r'\\W', ''.join(logP['SMILES'].to_list()))).keys())\n",
    "print(chars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8014e3ca-9c68-450a-a3b5-85f7e629894d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "C     213077\n",
       "O      37691\n",
       "N      36622\n",
       "Cl      5004\n",
       "F       4011\n",
       "S       3869\n",
       "Br       663\n",
       "P        370\n",
       "I        264\n",
       "Si        47\n",
       "Se        10\n",
       "As         2\n",
       "B          1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "atom_counts = []\n",
    "for i in range(16087):\n",
    "    mol = logP['mol'][i]\n",
    "    atoms = mol.GetAtoms()\n",
    "    atom_counts.extend([atom.GetSymbol() for atom in atoms])\n",
    "\n",
    "atom_count = pd.Series(atom_counts).value_counts()\n",
    "atom_count"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc5247ec-6364-45a0-889b-6b6c837d6305",
   "metadata": {},
   "source": [
    "In SMILES (Simplified Molecular Input Line Entry System) notation:\n",
    "\n",
    "- `-`, `=`, `#` each means single, double, triple bonds although `-` is usually omitted.\n",
    "-  Atoms are represented by the standard abbreviation of the chemical elements, in square brackets, such as [Au] for gold. Brackets may be omitted in the common case of atoms which:\n",
    "    1. are in the \"organic subset\" of B, C, N, O, P, S, F, Cl, Br, or I, and\n",
    "    2. have no formal charge, and\n",
    "    3. have the number of hydrogens attached implied by the SMILES valence model (typically their normal valence, but for N and P it is 3 or 5, and for S it is 2, 4 or 6), and\n",
    "    4. are the normal isotopes, and\n",
    "    5. are not chiral centers\n",
    " \n",
    "- Parantheses indicate branches.\n",
    "\n",
    "There are other rules but I am only describing the ones relevant in this dataset, judging from the characters contained in it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "623a9b47-17ef-4386-a8f2-96992fb27876",
   "metadata": {},
   "source": [
    "To look at the overall dataset and see how complicated it is, I looked at how the `SMILE` string is written.\n",
    "\n",
    "There are several different ways to write `SMILE` and this is a slightly complicated version, so I can't extract any features without using the cheminformatics package. So I will be using `RDkit` for feature extraction.\n",
    "\n",
    "There are 13 different atoms in the whole dataset, which means these are not just small molecules (typically *small*, simple organic molecules only contain C, H, N, O, P, sometimes S and F). From my knowledge of chemistry: `logp` which is solubility measurement, dependa on the size and polarity of the molecule. Calculating the overall polarity is complicated but instead I can use the features that affect polarity - types of atoms, bonds, structure, etc. `pIC50` is a separate feature from `logP` and can't be used in prediction."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e85d1360-5a3c-42a7-bfe2-0b70eb377fd0",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Feature Extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "217d78e8-a5ab-43ae-bf1e-342d91fc425d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = logP.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2d395713-31ed-4e15-bd64-1bc48c243946",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['mol'] = df['mol'].apply(lambda x: Chem.AddHs(x)) # add H atom\n",
    "df['num_of_heavy_atoms'] = df['mol'].apply(lambda x: x.GetNumHeavyAtoms()) # exclude H atom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3aae1864-98bd-47dd-9c10-2fd4f97f0d53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['C', 'O', 'N', 'Cl', 'F', 'S', 'Br', 'P', 'I'], dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "atom_count.index[:9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bb59d894-6972-4245-9855-6af9e93b02cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "atom_list = list(atom_count.index)\n",
    "for i in atom_list:\n",
    "    df[f'num_of_{i}_atoms'] = df['mol'].apply(lambda x: len(x.GetSubstructMatches(Chem.MolFromSmarts(f'[{i}]'))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3f8b9d40-898c-4548-adec-71135314ae88",
   "metadata": {},
   "outputs": [],
   "source": [
    "# the surface sum over all polar atoms or molecules also including their attached hydrogen atoms\n",
    "df['tpsa'] = df['mol'].apply(lambda x: Descriptors.TPSA(x))\n",
    "\n",
    "# molecular weight\n",
    "df['mol_w'] = df['mol'].apply(lambda x: Descriptors.ExactMolWt(x))\n",
    "\n",
    "# number of valence electrons\n",
    "df['num_valence_electrons'] = df['mol'].apply(lambda x: Descriptors.NumValenceElectrons(x))\n",
    "\n",
    "# number of aromatic rings\n",
    "df['num_aromatic_rings'] = df['mol'].apply(lambda x: rdMolDescriptors.CalcNumAromaticRings(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "706a9662-360b-4f14-89e9-a9f033f6042e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['C_SP3'] = df['mol'].apply(lambda x: rdMolDescriptors.CalcFractionCSP3(x))\n",
    "df['num_HBA'] = df['mol'].apply(lambda x: rdMolDescriptors.CalcNumHBA(x))\n",
    "df['num_HBD'] = df['mol'].apply(lambda x: rdMolDescriptors.CalcNumHBD(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "76345b18-7a6f-49c9-ac5b-210a3eb4a624",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SMILES</th>\n",
       "      <th>pIC50</th>\n",
       "      <th>mol</th>\n",
       "      <th>num_atoms</th>\n",
       "      <th>logP</th>\n",
       "      <th>num_of_heavy_atoms</th>\n",
       "      <th>num_of_C_atoms</th>\n",
       "      <th>num_of_O_atoms</th>\n",
       "      <th>num_of_N_atoms</th>\n",
       "      <th>num_of_Cl_atoms</th>\n",
       "      <th>...</th>\n",
       "      <th>num_of_Se_atoms</th>\n",
       "      <th>num_of_As_atoms</th>\n",
       "      <th>num_of_B_atoms</th>\n",
       "      <th>tpsa</th>\n",
       "      <th>mol_w</th>\n",
       "      <th>num_valence_electrons</th>\n",
       "      <th>num_aromatic_rings</th>\n",
       "      <th>C_SP3</th>\n",
       "      <th>num_HBA</th>\n",
       "      <th>num_HBD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>O=S(=O)(Nc1cccc(-c2cnc3ccccc3n2)c1)c1cccs1</td>\n",
       "      <td>4.26</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>25</td>\n",
       "      <td>4.1591</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>71.95</td>\n",
       "      <td>367.044919</td>\n",
       "      <td>124</td>\n",
       "      <td>4</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>O=c1cc(-c2nc(-c3ccc(-c4cn(CCP(=O)(O)O)nn4)cc3)...</td>\n",
       "      <td>4.34</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>36</td>\n",
       "      <td>3.6743</td>\n",
       "      <td>36</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>149.78</td>\n",
       "      <td>506.126768</td>\n",
       "      <td>182</td>\n",
       "      <td>5</td>\n",
       "      <td>0.083333</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NC(=O)c1ccc2c(c1)nc(C1CCC(O)CC1)n2CCCO</td>\n",
       "      <td>4.53</td>\n",
       "      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x00000182F1A...</td>\n",
       "      <td>23</td>\n",
       "      <td>1.5361</td>\n",
       "      <td>23</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>101.37</td>\n",
       "      <td>317.173942</td>\n",
       "      <td>124</td>\n",
       "      <td>2</td>\n",
       "      <td>0.529412</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              SMILES  pIC50  \\\n",
       "0         O=S(=O)(Nc1cccc(-c2cnc3ccccc3n2)c1)c1cccs1   4.26   \n",
       "1  O=c1cc(-c2nc(-c3ccc(-c4cn(CCP(=O)(O)O)nn4)cc3)...   4.34   \n",
       "2             NC(=O)c1ccc2c(c1)nc(C1CCC(O)CC1)n2CCCO   4.53   \n",
       "\n",
       "                                                 mol  num_atoms    logP  \\\n",
       "0  <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         25  4.1591   \n",
       "1  <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         36  3.6743   \n",
       "2  <rdkit.Chem.rdchem.Mol object at 0x00000182F1A...         23  1.5361   \n",
       "\n",
       "   num_of_heavy_atoms  num_of_C_atoms  num_of_O_atoms  num_of_N_atoms  \\\n",
       "0                  25               0               2               1   \n",
       "1                  36               2               4               0   \n",
       "2                  23              10               3               1   \n",
       "\n",
       "   num_of_Cl_atoms  ...  num_of_Se_atoms  num_of_As_atoms  num_of_B_atoms  \\\n",
       "0                0  ...                0                0               0   \n",
       "1                0  ...                0                0               0   \n",
       "2                0  ...                0                0               0   \n",
       "\n",
       "     tpsa       mol_w  num_valence_electrons  num_aromatic_rings     C_SP3  \\\n",
       "0   71.95  367.044919                    124                   4  0.000000   \n",
       "1  149.78  506.126768                    182                   5  0.083333   \n",
       "2  101.37  317.173942                    124                   2  0.529412   \n",
       "\n",
       "   num_HBA  num_HBD  \n",
       "0        5        1  \n",
       "1        8        4  \n",
       "2        5        3  \n",
       "\n",
       "[3 rows x 26 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efa7fd42-bc85-426f-884e-8857344f9655",
   "metadata": {},
   "source": [
    "Using the RDkit package, I extracted some features from the `SMILE` string."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e12e0d89-90ac-4753-942e-6fd2cf6b6dbf",
   "metadata": {},
   "source": [
    "## Pre-Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8f687834-9adc-4cf9-ae1f-7acaf5dcfa00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['num_of_heavy_atoms', 'num_of_C_atoms', 'num_of_O_atoms',\n",
      "       'num_of_N_atoms', 'num_of_Cl_atoms', 'num_of_F_atoms', 'num_of_S_atoms',\n",
      "       'num_of_Br_atoms', 'num_of_P_atoms', 'num_of_I_atoms',\n",
      "       'num_of_Si_atoms', 'num_of_Se_atoms', 'num_of_As_atoms',\n",
      "       'num_of_B_atoms', 'tpsa', 'mol_w', 'num_valence_electrons',\n",
      "       'num_aromatic_rings', 'C_SP3', 'num_HBA', 'num_HBD'],\n",
      "      dtype='object') (16087, 21)\n"
     ]
    }
   ],
   "source": [
    "data = df.drop(columns = ['SMILES', 'mol', 'num_atoms', 'pIC50'])\n",
    "features = data.drop(columns = ['logP'])\n",
    "target = data['logP']\n",
    "\n",
    "print(features.columns, features.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5c9b4f4e-6313-413f-9785-371cd0c95cb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    16087.000000\n",
       "mean         2.256600\n",
       "std          1.609861\n",
       "min         -5.395600\n",
       "25%          1.214900\n",
       "50%          2.163200\n",
       "75%          3.232440\n",
       "max         15.879200\n",
       "Name: logP, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f52288fa-a0d6-4786-b02c-1ba7d8c60542",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 16087 entries, 0 to 16086\n",
      "Data columns (total 21 columns):\n",
      " #   Column                 Non-Null Count  Dtype  \n",
      "---  ------                 --------------  -----  \n",
      " 0   num_of_heavy_atoms     16087 non-null  int64  \n",
      " 1   num_of_C_atoms         16087 non-null  int64  \n",
      " 2   num_of_O_atoms         16087 non-null  int64  \n",
      " 3   num_of_N_atoms         16087 non-null  int64  \n",
      " 4   num_of_Cl_atoms        16087 non-null  int64  \n",
      " 5   num_of_F_atoms         16087 non-null  int64  \n",
      " 6   num_of_S_atoms         16087 non-null  int64  \n",
      " 7   num_of_Br_atoms        16087 non-null  int64  \n",
      " 8   num_of_P_atoms         16087 non-null  int64  \n",
      " 9   num_of_I_atoms         16087 non-null  int64  \n",
      " 10  num_of_Si_atoms        16087 non-null  int64  \n",
      " 11  num_of_Se_atoms        16087 non-null  int64  \n",
      " 12  num_of_As_atoms        16087 non-null  int64  \n",
      " 13  num_of_B_atoms         16087 non-null  int64  \n",
      " 14  tpsa                   16087 non-null  float64\n",
      " 15  mol_w                  16087 non-null  float64\n",
      " 16  num_valence_electrons  16087 non-null  int64  \n",
      " 17  num_aromatic_rings     16087 non-null  int64  \n",
      " 18  C_SP3                  16087 non-null  float64\n",
      " 19  num_HBA                16087 non-null  int64  \n",
      " 20  num_HBD                16087 non-null  int64  \n",
      "dtypes: float64(3), int64(18)\n",
      "memory usage: 2.6 MB\n"
     ]
    }
   ],
   "source": [
    "features.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "cbcbe608-03bf-4751-88f8-9e3ba5c9cf13",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b2deff22-155f-4ba7-8696-29a635b909fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2dc5a5c-4fcd-4045-8214-01334b76e2cc",
   "metadata": {},
   "source": [
    "I separated data into training and test set, and scaled it. \\\n",
    "I also plotted the `logP` against the features. For example, `num_of_B_atoms` look completely unrelated to logP. But I'm not going to remove any features, because let's say there are two similar molecule where the only difference is it has `B` (boron) atom instead of a carbon, etc. So the number of certain atom itself can't explain anything."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6a7c4b7-af0f-4a49-80dc-24b9674d01c6",
   "metadata": {},
   "source": [
    "# Model Selection & Training:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11ef5ad7-e339-428b-86f1-4dc4f48077f4",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Regression Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "afd968a9-2d9f-48ee-bef7-83642a7c79bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = DecisionTreeRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cfadac13-e8d2-4117-8c3b-6218b07b565c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sfs = SFS(tree, k_features='best', forward=True, scoring='explained_variance', n_jobs=-1)\n",
    "sfs = sfs.fit(X_train_scaled, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "066b2c96-c778-40b5-8c80-8ed00dda93e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Features: ['num_of_heavy_atoms', 'num_of_O_atoms', 'num_of_N_atoms', 'num_of_Cl_atoms', 'num_of_F_atoms', 'num_of_S_atoms', 'num_of_Br_atoms', 'num_of_P_atoms', 'num_of_I_atoms', 'num_of_Si_atoms', 'num_of_Se_atoms', 'num_of_As_atoms', 'num_of_B_atoms', 'tpsa', 'num_valence_electrons', 'num_aromatic_rings', 'num_HBA', 'num_HBD']\n"
     ]
    }
   ],
   "source": [
    "selected_features = list(sfs.k_feature_names_)\n",
    "print(\"Selected Features:\", selected_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9296bfb4-fa85-40e5-ab8e-71d9070647dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_selected = X_train[selected_features]\n",
    "X_test_selected = X_test[selected_features]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b97d1259-d697-4665-a45c-d30e28f0baaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;DecisionTreeRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.tree.DecisionTreeRegressor.html\">?<span>Documentation for DecisionTreeRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeRegressor()"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.fit(X_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a044ad23-c84a-4407-91e2-aac24287b158",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_tree = tree.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "501773bc-eea2-4e06-b569-fc431b24f557",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.8328302740438889\n",
      "MSE: 0.45145218981065355\n",
      "MAE: 0.4118751706299883\n",
      "MAPE: 1.449628113922984\n"
     ]
    }
   ],
   "source": [
    "r2_tree = r2_score(y_test, y_pred_tree)\n",
    "MSE_tree = mean_squared_error(y_test, y_pred_tree)\n",
    "MAE_tree = mean_absolute_error(y_test, y_pred_tree)\n",
    "MAPE_tree = mean_absolute_percentage_error(y_test, y_pred_tree)\n",
    "\n",
    "print(f\"R2: {r2_tree}\")\n",
    "print(f\"MSE: {MSE_tree}\")\n",
    "print(f\"MAE: {MAE_tree}\")\n",
    "print(f\"MAPE: {MAPE_tree}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d54ee38-0b45-44a3-a487-12d6856305d8",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "76239d55-2f19-4303-b891-e734e8c1eb3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "rfr = RandomForestRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f99f89fb-a9b3-467a-8748-8d775764c2b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfr.fit(X_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "84eadbc7-433a-4375-925b-3e31e3f1df3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_rfr = rfr.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8e929f21-450b-4571-a2f2-cd6960ad392e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.9071142917733823\n",
      "MSE: 0.25084360305782427\n",
      "MAE: 0.3332290329315901\n",
      "MAPE: 1.4939731473671225\n"
     ]
    }
   ],
   "source": [
    "r2_rfr = r2_score(y_test, y_pred_rfr)\n",
    "MSE_rfr = mean_squared_error(y_test, y_pred_rfr)\n",
    "MAE_rfr = mean_absolute_error(y_test, y_pred_rfr)\n",
    "MAPE_rfr = mean_absolute_percentage_error(y_test, y_pred_rfr)\n",
    "\n",
    "print(f\"R2: {r2_rfr}\")\n",
    "print(f\"MSE: {MSE_rfr}\")\n",
    "print(f\"MAE: {MAE_rfr}\")\n",
    "print(f\"MAPE: {MAPE_rfr}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f47c5f6a-6c6c-45b4-9df7-38ff6c806c23",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Extra Trees Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "f55a2ebf-6d3e-43f0-bd55-55cfc05d7a5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "etr = ExtraTreesRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "a597fd47-8a5c-417f-bc3e-d338108574b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-7 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-7 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-7 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-7 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-7 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-7 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-7 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-7 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-7 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-7 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-7 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-7 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ExtraTreesRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;ExtraTreesRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html\">?<span>Documentation for ExtraTreesRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>ExtraTreesRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "ExtraTreesRegressor()"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "etr.fit(X_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "c5ba64b8-3987-4e86-b1b0-257d1dff68a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_etr = etr.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "cfc496af-608d-4ec0-9b6b-bef117aed213",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.9146503066683189\n",
      "MSE: 0.2304921284872548\n",
      "MAE: 0.299240949632179\n",
      "MAPE: 1.3217518214543247\n"
     ]
    }
   ],
   "source": [
    "r2_etr = r2_score(y_test, y_pred_etr)\n",
    "MSE_etr = mean_squared_error(y_test, y_pred_etr)\n",
    "MAE_etr = mean_absolute_error(y_test, y_pred_etr)\n",
    "MAPE_etr = mean_absolute_percentage_error(y_test, y_pred_etr)\n",
    "\n",
    "print(f\"R2: {r2_etr}\")\n",
    "print(f\"MSE: {MSE_etr}\")\n",
    "print(f\"MAE: {MAE_etr}\")\n",
    "print(f\"MAPE: {MAPE_etr}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0afb82-409c-4319-b65c-627af424bf78",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "87584fa5-4058-497c-ab6b-01c1a96492d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "linear = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "00ed5ed8-b982-4cf8-bf11-264cb0c04259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linear.fit(X_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "36d08f0c-29cf-4066-8715-10615743ea23",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_linear = linear.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6bb7d3a4-5eda-4133-bf4c-749014690262",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.7953590967057936\n",
      "MSE: 0.5526454230190857\n",
      "MAE: 0.5811360691217522\n",
      "MAPE: 1.7873679979460741\n"
     ]
    }
   ],
   "source": [
    "r2_linear = r2_score(y_test, y_pred_linear)\n",
    "MSE_linear = mean_squared_error(y_test, y_pred_linear)\n",
    "MAE_linear = mean_absolute_error(y_test, y_pred_linear)\n",
    "MAPE_linear = mean_absolute_percentage_error(y_test, y_pred_linear)\n",
    "\n",
    "print(f\"R2: {r2_linear}\")\n",
    "print(f\"MSE: {MSE_linear}\")\n",
    "print(f\"MAE: {MAE_linear}\")\n",
    "print(f\"MAPE: {MAPE_linear}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8503cab7-ce02-4a05-b692-0d51720eafca",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Epsilon-Support Vector Regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "221635b6-bfc2-43c5-8f04-1c52be5fe7e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "svr = make_pipeline(StandardScaler(), SVR())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9e2f0989-25f6-4356-8010-df6fde9fe22b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()), (&#x27;svr&#x27;, SVR())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()), (&#x27;svr&#x27;, SVR())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;StandardScaler<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;SVR<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVR.html\">?<span>Documentation for SVR</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>SVR()</pre></div> </div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()), ('svr', SVR())])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr.fit(X_train_selected, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "dda574f6-3bfc-4812-babf-120529f32ae2",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_svr = svr.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6d7e0f27-7c23-44e4-9d51-e662d44ee505",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.8732580178669838\n",
      "MSE: 0.34227456585000887\n",
      "MAE: 0.42719733620555445\n",
      "MAPE: 1.8999249111223189\n"
     ]
    }
   ],
   "source": [
    "r2_svr = r2_score(y_test, y_pred_svr)\n",
    "MSE_svr = mean_squared_error(y_test, y_pred_svr)\n",
    "MAE_svr = mean_absolute_error(y_test, y_pred_svr)\n",
    "MAPE_svr = mean_absolute_percentage_error(y_test, y_pred_svr)\n",
    "\n",
    "print(f\"R2: {r2_svr}\")\n",
    "print(f\"MSE: {MSE_svr}\")\n",
    "print(f\"MAE: {MAE_svr}\")\n",
    "print(f\"MAPE: {MAPE_svr}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97c92ae7-2486-4c18-b96e-8a4d611c84db",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "7e6dc29a-7fb7-4024-a3a4-1e90637d5355",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Dense(128, activation = 'linear'),\n",
    "    tf.keras.layers.Dense(128),\n",
    "    tf.keras.layers.Dense(64),\n",
    "    tf.keras.layers.Dense(64),\n",
    "    tf.keras.layers.Dense(32),\n",
    "    tf.keras.layers.Dense(1, activation = 'linear')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1c3ded33-6650-498a-8c03-70b05cde915e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 81.2736 - mean_absolute_error: 2.8214 - val_loss: 0.6381 - val_mean_absolute_error: 0.6099\n",
      "Epoch 2/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 1.3886 - mean_absolute_error: 0.7632 - val_loss: 0.5757 - val_mean_absolute_error: 0.5915\n",
      "Epoch 3/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.6803 - mean_absolute_error: 0.6317 - val_loss: 0.6948 - val_mean_absolute_error: 0.6428\n",
      "Epoch 4/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.6617 - mean_absolute_error: 0.6210 - val_loss: 0.5540 - val_mean_absolute_error: 0.5715\n",
      "Epoch 5/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 1.2005 - mean_absolute_error: 0.7743 - val_loss: 0.8373 - val_mean_absolute_error: 0.7051\n",
      "Epoch 6/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.7393 - mean_absolute_error: 0.6531 - val_loss: 2.3455 - val_mean_absolute_error: 1.2562\n",
      "Epoch 7/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - loss: 0.8499 - mean_absolute_error: 0.7003 - val_loss: 0.6115 - val_mean_absolute_error: 0.6103\n",
      "Epoch 8/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.9639 - mean_absolute_error: 0.7348 - val_loss: 0.5924 - val_mean_absolute_error: 0.5940\n",
      "Epoch 9/50\n",
      "\u001b[1m206/206\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - loss: 0.6728 - mean_absolute_error: 0.6314 - val_loss: 0.5675 - val_mean_absolute_error: 0.5831\n",
      "Test loss: 0.5851405262947083\n",
      "Mean Absolute Error: 0.5967089533805847\n"
     ]
    }
   ],
   "source": [
    "early_stopping_cb = keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)\n",
    "\n",
    "model.compile(\n",
    "    loss = keras.losses.MeanSquaredError(reduction='sum_over_batch_size'),\n",
    "    optimizer = keras.optimizers.Nadam(),\n",
    "    metrics = [keras.metrics.MeanAbsoluteError()],\n",
    ")\n",
    "\n",
    "model.fit(X_train_selected, y_train, epochs=50, batch_size=50, validation_split=0.2, callbacks=[early_stopping_cb])\n",
    "\n",
    "test_scores = model.evaluate(X_test_selected, y_test, verbose=0)\n",
    "\n",
    "print(\"Test loss:\", test_scores[0])\n",
    "print(\"Mean Absolute Error:\", test_scores[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "289facc8-bf36-41e6-af56-c8cdb9195c85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,432</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,512</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">4,160</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │         \u001b[38;5;34m2,432\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m16,512\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m8,256\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │         \u001b[38;5;34m4,160\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)             │         \u001b[38;5;34m2,080\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │            \u001b[38;5;34m33\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">100,422</span> (392.28 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m100,422\u001b[0m (392.28 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">33,473</span> (130.75 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m33,473\u001b[0m (130.75 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">66,949</span> (261.52 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m66,949\u001b[0m (261.52 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "04d232bd-8200-446c-837a-8b569496f8bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred_nn = model.predict(X_test_selected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "065858ea-ba5c-496a-83f0-47d9e39b8b3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.7833263926300279\n",
      "MSE: 0.5851404849884652\n",
      "MAE: 0.5967089671877228\n",
      "MAPE: 1.701454720767419\n"
     ]
    }
   ],
   "source": [
    "r2_nn = r2_score(y_test, y_pred_nn)\n",
    "MSE_nn = mean_squared_error(y_test, y_pred_nn)\n",
    "MAE_nn = mean_absolute_error(y_test, y_pred_nn)\n",
    "MAPE_nn = mean_absolute_percentage_error(y_test, y_pred_nn)\n",
    "\n",
    "print(f\"R2: {r2_nn}\")\n",
    "print(f\"MSE: {MSE_nn}\")\n",
    "print(f\"MAE: {MAE_nn}\")\n",
    "print(f\"MAPE: {MAPE_nn}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdeebb4c-3c11-465e-aa28-3576831a3d5c",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Using XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fbc825ef-196d-4822-bfd7-6195d80c1e8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-6 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-6 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-6 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-6 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-6 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-6 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-6 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-6 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None, colsample_bytree=1,\n",
       "             device=None, early_stopping_rounds=None, enable_categorical=False,\n",
       "             eval_metric=None, feature_types=None, gamma=0, grow_policy=None,\n",
       "             importance_type=None, interaction_constraints=None,\n",
       "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
       "             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n",
       "             max_leaves=None, min_child_weight=None, missing=nan,\n",
       "             monotone_constraints=None, multi_strategy=None, n_estimators=100,\n",
       "             n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;XGBRegressor<span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None, colsample_bytree=1,\n",
       "             device=None, early_stopping_rounds=None, enable_categorical=False,\n",
       "             eval_metric=None, feature_types=None, gamma=0, grow_policy=None,\n",
       "             importance_type=None, interaction_constraints=None,\n",
       "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
       "             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n",
       "             max_leaves=None, min_child_weight=None, missing=nan,\n",
       "             monotone_constraints=None, multi_strategy=None, n_estimators=100,\n",
       "             n_jobs=None, num_parallel_tree=None, random_state=None, ...)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "XGBRegressor(base_score=None, booster=None, callbacks=None,\n",
       "             colsample_bylevel=None, colsample_bynode=None, colsample_bytree=1,\n",
       "             device=None, early_stopping_rounds=None, enable_categorical=False,\n",
       "             eval_metric=None, feature_types=None, gamma=0, grow_policy=None,\n",
       "             importance_type=None, interaction_constraints=None,\n",
       "             learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n",
       "             max_cat_to_onehot=None, max_delta_step=None, max_depth=8,\n",
       "             max_leaves=None, min_child_weight=None, missing=nan,\n",
       "             monotone_constraints=None, multi_strategy=None, n_estimators=100,\n",
       "             n_jobs=None, num_parallel_tree=None, random_state=None, ...)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb_model = xgb.XGBRegressor(n_estimators=100, learning_rate=0.1, gamma=0, subsample=0.75,\n",
    "                           colsample_bytree=1, max_depth=8)\n",
    "\n",
    "xgb_model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8c6af620-e99d-4485-9290-78b34168ea1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_xgb = xgb_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "9aa16c0c-e316-40b4-9e2b-213edcec42d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.9143219308671949\n",
      "MSE: 0.23137892765887752\n",
      "MAE: 0.3449592476308809\n",
      "MAPE: 1.8717312684573022\n"
     ]
    }
   ],
   "source": [
    "r2_xgb = r2_score(y_test, y_pred_xgb)\n",
    "MSE_xgb = mean_squared_error(y_test, y_pred_xgb)\n",
    "MAE_xgb = mean_absolute_error(y_test, y_pred_xgb)\n",
    "MAPE_xgb = mean_absolute_percentage_error(y_test, y_pred_xgb)\n",
    "\n",
    "print(f\"R2: {r2_xgb}\")\n",
    "print(f\"MSE: {MSE_xgb}\")\n",
    "print(f\"MAE: {MAE_xgb}\")\n",
    "print(f\"MAPE: {MAPE_xgb}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2b2a953-f549-422e-9e01-6048b3259874",
   "metadata": {},
   "source": [
    "## Pycaret"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "cab2aa7d-bcb5-443d-b620-161594c6c7e9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_f3a9e_row8_col1 {\n",
       "  background-color: lightgreen;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_f3a9e\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_f3a9e_level0_col0\" class=\"col_heading level0 col0\" >Description</th>\n",
       "      <th id=\"T_f3a9e_level0_col1\" class=\"col_heading level0 col1\" >Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_f3a9e_row0_col0\" class=\"data row0 col0\" >Session id</td>\n",
       "      <td id=\"T_f3a9e_row0_col1\" class=\"data row0 col1\" >10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_f3a9e_row1_col0\" class=\"data row1 col0\" >Target</td>\n",
       "      <td id=\"T_f3a9e_row1_col1\" class=\"data row1 col1\" >logP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_f3a9e_row2_col0\" class=\"data row2 col0\" >Target type</td>\n",
       "      <td id=\"T_f3a9e_row2_col1\" class=\"data row2 col1\" >Regression</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_f3a9e_row3_col0\" class=\"data row3 col0\" >Original data shape</td>\n",
       "      <td id=\"T_f3a9e_row3_col1\" class=\"data row3 col1\" >(12869, 22)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_f3a9e_row4_col0\" class=\"data row4 col0\" >Transformed data shape</td>\n",
       "      <td id=\"T_f3a9e_row4_col1\" class=\"data row4 col1\" >(12869, 22)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_f3a9e_row5_col0\" class=\"data row5 col0\" >Transformed train set shape</td>\n",
       "      <td id=\"T_f3a9e_row5_col1\" class=\"data row5 col1\" >(9008, 22)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_f3a9e_row6_col0\" class=\"data row6 col0\" >Transformed test set shape</td>\n",
       "      <td id=\"T_f3a9e_row6_col1\" class=\"data row6 col1\" >(3861, 22)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_f3a9e_row7_col0\" class=\"data row7 col0\" >Numeric features</td>\n",
       "      <td id=\"T_f3a9e_row7_col1\" class=\"data row7 col1\" >21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_f3a9e_row8_col0\" class=\"data row8 col0\" >Preprocess</td>\n",
       "      <td id=\"T_f3a9e_row8_col1\" class=\"data row8 col1\" >True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_f3a9e_row9_col0\" class=\"data row9 col0\" >Imputation type</td>\n",
       "      <td id=\"T_f3a9e_row9_col1\" class=\"data row9 col1\" >simple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
       "      <td id=\"T_f3a9e_row10_col0\" class=\"data row10 col0\" >Numeric imputation</td>\n",
       "      <td id=\"T_f3a9e_row10_col1\" class=\"data row10 col1\" >mean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
       "      <td id=\"T_f3a9e_row11_col0\" class=\"data row11 col0\" >Categorical imputation</td>\n",
       "      <td id=\"T_f3a9e_row11_col1\" class=\"data row11 col1\" >mode</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
       "      <td id=\"T_f3a9e_row12_col0\" class=\"data row12 col0\" >Fold Generator</td>\n",
       "      <td id=\"T_f3a9e_row12_col1\" class=\"data row12 col1\" >KFold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
       "      <td id=\"T_f3a9e_row13_col0\" class=\"data row13 col0\" >Fold Number</td>\n",
       "      <td id=\"T_f3a9e_row13_col1\" class=\"data row13 col1\" >10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
       "      <td id=\"T_f3a9e_row14_col0\" class=\"data row14 col0\" >CPU Jobs</td>\n",
       "      <td id=\"T_f3a9e_row14_col1\" class=\"data row14 col1\" >-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
       "      <td id=\"T_f3a9e_row15_col0\" class=\"data row15 col0\" >Use GPU</td>\n",
       "      <td id=\"T_f3a9e_row15_col1\" class=\"data row15 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
       "      <td id=\"T_f3a9e_row16_col0\" class=\"data row16 col0\" >Log Experiment</td>\n",
       "      <td id=\"T_f3a9e_row16_col1\" class=\"data row16 col1\" >False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
       "      <td id=\"T_f3a9e_row17_col0\" class=\"data row17 col0\" >Experiment Name</td>\n",
       "      <td id=\"T_f3a9e_row17_col1\" class=\"data row17 col1\" >reg-default-name</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f3a9e_level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
       "      <td id=\"T_f3a9e_row18_col0\" class=\"data row18 col0\" >USI</td>\n",
       "      <td id=\"T_f3a9e_row18_col1\" class=\"data row18 col1\" >359d</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x1831692c1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_8205e th {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_8205e_row0_col0, #T_8205e_row1_col0, #T_8205e_row1_col1, #T_8205e_row1_col2, #T_8205e_row1_col3, #T_8205e_row1_col4, #T_8205e_row1_col5, #T_8205e_row1_col6, #T_8205e_row2_col0, #T_8205e_row2_col1, #T_8205e_row2_col2, #T_8205e_row2_col3, #T_8205e_row2_col4, #T_8205e_row2_col5, #T_8205e_row2_col6, #T_8205e_row3_col0, #T_8205e_row3_col1, #T_8205e_row3_col2, #T_8205e_row3_col3, #T_8205e_row3_col4, #T_8205e_row3_col5, #T_8205e_row3_col6, #T_8205e_row4_col0, #T_8205e_row4_col1, #T_8205e_row4_col2, #T_8205e_row4_col3, #T_8205e_row4_col4, #T_8205e_row4_col5, #T_8205e_row4_col6, #T_8205e_row5_col0, #T_8205e_row5_col1, #T_8205e_row5_col2, #T_8205e_row5_col3, #T_8205e_row5_col4, #T_8205e_row5_col5, #T_8205e_row5_col6, #T_8205e_row6_col0, #T_8205e_row6_col1, #T_8205e_row6_col2, #T_8205e_row6_col3, #T_8205e_row6_col4, #T_8205e_row6_col5, #T_8205e_row6_col6, #T_8205e_row7_col0, #T_8205e_row7_col1, #T_8205e_row7_col2, #T_8205e_row7_col3, #T_8205e_row7_col4, #T_8205e_row7_col5, #T_8205e_row7_col6, #T_8205e_row8_col0, #T_8205e_row8_col1, #T_8205e_row8_col2, #T_8205e_row8_col3, #T_8205e_row8_col4, #T_8205e_row8_col5, #T_8205e_row8_col6, #T_8205e_row9_col0, #T_8205e_row9_col1, #T_8205e_row9_col2, #T_8205e_row9_col3, #T_8205e_row9_col4, #T_8205e_row9_col5, #T_8205e_row9_col6, #T_8205e_row10_col0, #T_8205e_row10_col1, #T_8205e_row10_col2, #T_8205e_row10_col3, #T_8205e_row10_col4, #T_8205e_row10_col5, #T_8205e_row10_col6, #T_8205e_row11_col0, #T_8205e_row11_col1, #T_8205e_row11_col2, #T_8205e_row11_col3, #T_8205e_row11_col4, #T_8205e_row11_col5, #T_8205e_row11_col6, #T_8205e_row12_col0, #T_8205e_row12_col1, #T_8205e_row12_col2, #T_8205e_row12_col3, #T_8205e_row12_col4, #T_8205e_row12_col5, #T_8205e_row12_col6, #T_8205e_row13_col0, #T_8205e_row13_col1, #T_8205e_row13_col2, #T_8205e_row13_col3, #T_8205e_row13_col4, #T_8205e_row13_col5, #T_8205e_row13_col6, #T_8205e_row14_col0, #T_8205e_row14_col1, #T_8205e_row14_col2, #T_8205e_row14_col3, #T_8205e_row14_col4, #T_8205e_row14_col5, #T_8205e_row14_col6, #T_8205e_row15_col0, #T_8205e_row15_col1, #T_8205e_row15_col2, #T_8205e_row15_col3, #T_8205e_row15_col4, #T_8205e_row15_col5, #T_8205e_row15_col6, #T_8205e_row16_col0, #T_8205e_row16_col1, #T_8205e_row16_col2, #T_8205e_row16_col3, #T_8205e_row16_col4, #T_8205e_row16_col5, #T_8205e_row16_col6, #T_8205e_row17_col0, #T_8205e_row17_col1, #T_8205e_row17_col2, #T_8205e_row17_col3, #T_8205e_row17_col4, #T_8205e_row17_col5, #T_8205e_row17_col6, #T_8205e_row18_col0, #T_8205e_row18_col1, #T_8205e_row18_col2, #T_8205e_row18_col3, #T_8205e_row18_col4, #T_8205e_row18_col5, #T_8205e_row18_col6 {\n",
       "  text-align: left;\n",
       "}\n",
       "#T_8205e_row0_col1, #T_8205e_row0_col2, #T_8205e_row0_col3, #T_8205e_row0_col4, #T_8205e_row0_col5, #T_8205e_row0_col6 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "}\n",
       "#T_8205e_row0_col7, #T_8205e_row1_col7, #T_8205e_row2_col7, #T_8205e_row3_col7, #T_8205e_row4_col7, #T_8205e_row5_col7, #T_8205e_row6_col7, #T_8205e_row7_col7, #T_8205e_row8_col7, #T_8205e_row9_col7, #T_8205e_row10_col7, #T_8205e_row11_col7, #T_8205e_row12_col7, #T_8205e_row13_col7, #T_8205e_row14_col7, #T_8205e_row15_col7, #T_8205e_row16_col7, #T_8205e_row18_col7 {\n",
       "  text-align: left;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "#T_8205e_row17_col7 {\n",
       "  text-align: left;\n",
       "  background-color: yellow;\n",
       "  background-color: lightgrey;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_8205e\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_8205e_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_8205e_level0_col1\" class=\"col_heading level0 col1\" >MAE</th>\n",
       "      <th id=\"T_8205e_level0_col2\" class=\"col_heading level0 col2\" >MSE</th>\n",
       "      <th id=\"T_8205e_level0_col3\" class=\"col_heading level0 col3\" >RMSE</th>\n",
       "      <th id=\"T_8205e_level0_col4\" class=\"col_heading level0 col4\" >R2</th>\n",
       "      <th id=\"T_8205e_level0_col5\" class=\"col_heading level0 col5\" >RMSLE</th>\n",
       "      <th id=\"T_8205e_level0_col6\" class=\"col_heading level0 col6\" >MAPE</th>\n",
       "      <th id=\"T_8205e_level0_col7\" class=\"col_heading level0 col7\" >TT (Sec)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row0\" class=\"row_heading level0 row0\" >et</th>\n",
       "      <td id=\"T_8205e_row0_col0\" class=\"data row0 col0\" >Extra Trees Regressor</td>\n",
       "      <td id=\"T_8205e_row0_col1\" class=\"data row0 col1\" >0.3241</td>\n",
       "      <td id=\"T_8205e_row0_col2\" class=\"data row0 col2\" >0.2615</td>\n",
       "      <td id=\"T_8205e_row0_col3\" class=\"data row0 col3\" >0.5091</td>\n",
       "      <td id=\"T_8205e_row0_col4\" class=\"data row0 col4\" >0.8985</td>\n",
       "      <td id=\"T_8205e_row0_col5\" class=\"data row0 col5\" >0.1746</td>\n",
       "      <td id=\"T_8205e_row0_col6\" class=\"data row0 col6\" >0.6036</td>\n",
       "      <td id=\"T_8205e_row0_col7\" class=\"data row0 col7\" >0.4610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row1\" class=\"row_heading level0 row1\" >xgboost</th>\n",
       "      <td id=\"T_8205e_row1_col0\" class=\"data row1 col0\" >Extreme Gradient Boosting</td>\n",
       "      <td id=\"T_8205e_row1_col1\" class=\"data row1 col1\" >0.3607</td>\n",
       "      <td id=\"T_8205e_row1_col2\" class=\"data row1 col2\" >0.2773</td>\n",
       "      <td id=\"T_8205e_row1_col3\" class=\"data row1 col3\" >0.5232</td>\n",
       "      <td id=\"T_8205e_row1_col4\" class=\"data row1 col4\" >0.8926</td>\n",
       "      <td id=\"T_8205e_row1_col5\" class=\"data row1 col5\" >0.1808</td>\n",
       "      <td id=\"T_8205e_row1_col6\" class=\"data row1 col6\" >0.6066</td>\n",
       "      <td id=\"T_8205e_row1_col7\" class=\"data row1 col7\" >0.0710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row2\" class=\"row_heading level0 row2\" >rf</th>\n",
       "      <td id=\"T_8205e_row2_col0\" class=\"data row2 col0\" >Random Forest Regressor</td>\n",
       "      <td id=\"T_8205e_row2_col1\" class=\"data row2 col1\" >0.3723</td>\n",
       "      <td id=\"T_8205e_row2_col2\" class=\"data row2 col2\" >0.3098</td>\n",
       "      <td id=\"T_8205e_row2_col3\" class=\"data row2 col3\" >0.5539</td>\n",
       "      <td id=\"T_8205e_row2_col4\" class=\"data row2 col4\" >0.8798</td>\n",
       "      <td id=\"T_8205e_row2_col5\" class=\"data row2 col5\" >0.1905</td>\n",
       "      <td id=\"T_8205e_row2_col6\" class=\"data row2 col6\" >0.6733</td>\n",
       "      <td id=\"T_8205e_row2_col7\" class=\"data row2 col7\" >0.6440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row3\" class=\"row_heading level0 row3\" >lightgbm</th>\n",
       "      <td id=\"T_8205e_row3_col0\" class=\"data row3 col0\" >Light Gradient Boosting Machine</td>\n",
       "      <td id=\"T_8205e_row3_col1\" class=\"data row3 col1\" >0.4055</td>\n",
       "      <td id=\"T_8205e_row3_col2\" class=\"data row3 col2\" >0.3144</td>\n",
       "      <td id=\"T_8205e_row3_col3\" class=\"data row3 col3\" >0.5584</td>\n",
       "      <td id=\"T_8205e_row3_col4\" class=\"data row3 col4\" >0.8779</td>\n",
       "      <td id=\"T_8205e_row3_col5\" class=\"data row3 col5\" >0.1963</td>\n",
       "      <td id=\"T_8205e_row3_col6\" class=\"data row3 col6\" >0.6628</td>\n",
       "      <td id=\"T_8205e_row3_col7\" class=\"data row3 col7\" >0.1140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row4\" class=\"row_heading level0 row4\" >dt</th>\n",
       "      <td id=\"T_8205e_row4_col0\" class=\"data row4 col0\" >Decision Tree Regressor</td>\n",
       "      <td id=\"T_8205e_row4_col1\" class=\"data row4 col1\" >0.4968</td>\n",
       "      <td id=\"T_8205e_row4_col2\" class=\"data row4 col2\" >0.5994</td>\n",
       "      <td id=\"T_8205e_row4_col3\" class=\"data row4 col3\" >0.7727</td>\n",
       "      <td id=\"T_8205e_row4_col4\" class=\"data row4 col4\" >0.7663</td>\n",
       "      <td id=\"T_8205e_row4_col5\" class=\"data row4 col5\" >0.2567</td>\n",
       "      <td id=\"T_8205e_row4_col6\" class=\"data row4 col6\" >1.2265</td>\n",
       "      <td id=\"T_8205e_row4_col7\" class=\"data row4 col7\" >0.0210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row5\" class=\"row_heading level0 row5\" >gbr</th>\n",
       "      <td id=\"T_8205e_row5_col0\" class=\"data row5 col0\" >Gradient Boosting Regressor</td>\n",
       "      <td id=\"T_8205e_row5_col1\" class=\"data row5 col1\" >0.5045</td>\n",
       "      <td id=\"T_8205e_row5_col2\" class=\"data row5 col2\" >0.4594</td>\n",
       "      <td id=\"T_8205e_row5_col3\" class=\"data row5 col3\" >0.6759</td>\n",
       "      <td id=\"T_8205e_row5_col4\" class=\"data row5 col4\" >0.8211</td>\n",
       "      <td id=\"T_8205e_row5_col5\" class=\"data row5 col5\" >0.2314</td>\n",
       "      <td id=\"T_8205e_row5_col6\" class=\"data row5 col6\" >0.9773</td>\n",
       "      <td id=\"T_8205e_row5_col7\" class=\"data row5 col7\" >0.1860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row6\" class=\"row_heading level0 row6\" >lr</th>\n",
       "      <td id=\"T_8205e_row6_col0\" class=\"data row6 col0\" >Linear Regression</td>\n",
       "      <td id=\"T_8205e_row6_col1\" class=\"data row6 col1\" >0.5667</td>\n",
       "      <td id=\"T_8205e_row6_col2\" class=\"data row6 col2\" >0.5414</td>\n",
       "      <td id=\"T_8205e_row6_col3\" class=\"data row6 col3\" >0.7354</td>\n",
       "      <td id=\"T_8205e_row6_col4\" class=\"data row6 col4\" >0.7879</td>\n",
       "      <td id=\"T_8205e_row6_col5\" class=\"data row6 col5\" >0.2469</td>\n",
       "      <td id=\"T_8205e_row6_col6\" class=\"data row6 col6\" >0.8432</td>\n",
       "      <td id=\"T_8205e_row6_col7\" class=\"data row6 col7\" >0.6640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row7\" class=\"row_heading level0 row7\" >ridge</th>\n",
       "      <td id=\"T_8205e_row7_col0\" class=\"data row7 col0\" >Ridge Regression</td>\n",
       "      <td id=\"T_8205e_row7_col1\" class=\"data row7 col1\" >0.5668</td>\n",
       "      <td id=\"T_8205e_row7_col2\" class=\"data row7 col2\" >0.5414</td>\n",
       "      <td id=\"T_8205e_row7_col3\" class=\"data row7 col3\" >0.7354</td>\n",
       "      <td id=\"T_8205e_row7_col4\" class=\"data row7 col4\" >0.7879</td>\n",
       "      <td id=\"T_8205e_row7_col5\" class=\"data row7 col5\" >0.2468</td>\n",
       "      <td id=\"T_8205e_row7_col6\" class=\"data row7 col6\" >0.8425</td>\n",
       "      <td id=\"T_8205e_row7_col7\" class=\"data row7 col7\" >0.0120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row8\" class=\"row_heading level0 row8\" >br</th>\n",
       "      <td id=\"T_8205e_row8_col0\" class=\"data row8 col0\" >Bayesian Ridge</td>\n",
       "      <td id=\"T_8205e_row8_col1\" class=\"data row8 col1\" >0.5672</td>\n",
       "      <td id=\"T_8205e_row8_col2\" class=\"data row8 col2\" >0.5418</td>\n",
       "      <td id=\"T_8205e_row8_col3\" class=\"data row8 col3\" >0.7356</td>\n",
       "      <td id=\"T_8205e_row8_col4\" class=\"data row8 col4\" >0.7878</td>\n",
       "      <td id=\"T_8205e_row8_col5\" class=\"data row8 col5\" >0.2468</td>\n",
       "      <td id=\"T_8205e_row8_col6\" class=\"data row8 col6\" >0.8422</td>\n",
       "      <td id=\"T_8205e_row8_col7\" class=\"data row8 col7\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row9\" class=\"row_heading level0 row9\" >huber</th>\n",
       "      <td id=\"T_8205e_row9_col0\" class=\"data row9 col0\" >Huber Regressor</td>\n",
       "      <td id=\"T_8205e_row9_col1\" class=\"data row9 col1\" >0.5793</td>\n",
       "      <td id=\"T_8205e_row9_col2\" class=\"data row9 col2\" >0.5671</td>\n",
       "      <td id=\"T_8205e_row9_col3\" class=\"data row9 col3\" >0.7527</td>\n",
       "      <td id=\"T_8205e_row9_col4\" class=\"data row9 col4\" >0.7780</td>\n",
       "      <td id=\"T_8205e_row9_col5\" class=\"data row9 col5\" >0.2513</td>\n",
       "      <td id=\"T_8205e_row9_col6\" class=\"data row9 col6\" >0.9404</td>\n",
       "      <td id=\"T_8205e_row9_col7\" class=\"data row9 col7\" >0.0700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row10\" class=\"row_heading level0 row10\" >knn</th>\n",
       "      <td id=\"T_8205e_row10_col0\" class=\"data row10 col0\" >K Neighbors Regressor</td>\n",
       "      <td id=\"T_8205e_row10_col1\" class=\"data row10 col1\" >0.6042</td>\n",
       "      <td id=\"T_8205e_row10_col2\" class=\"data row10 col2\" >0.6919</td>\n",
       "      <td id=\"T_8205e_row10_col3\" class=\"data row10 col3\" >0.8293</td>\n",
       "      <td id=\"T_8205e_row10_col4\" class=\"data row10 col4\" >0.7308</td>\n",
       "      <td id=\"T_8205e_row10_col5\" class=\"data row10 col5\" >0.2691</td>\n",
       "      <td id=\"T_8205e_row10_col6\" class=\"data row10 col6\" >1.0062</td>\n",
       "      <td id=\"T_8205e_row10_col7\" class=\"data row10 col7\" >0.0320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row11\" class=\"row_heading level0 row11\" >en</th>\n",
       "      <td id=\"T_8205e_row11_col0\" class=\"data row11 col0\" >Elastic Net</td>\n",
       "      <td id=\"T_8205e_row11_col1\" class=\"data row11 col1\" >0.6595</td>\n",
       "      <td id=\"T_8205e_row11_col2\" class=\"data row11 col2\" >0.7409</td>\n",
       "      <td id=\"T_8205e_row11_col3\" class=\"data row11 col3\" >0.8599</td>\n",
       "      <td id=\"T_8205e_row11_col4\" class=\"data row11 col4\" >0.7102</td>\n",
       "      <td id=\"T_8205e_row11_col5\" class=\"data row11 col5\" >0.2766</td>\n",
       "      <td id=\"T_8205e_row11_col6\" class=\"data row11 col6\" >1.2445</td>\n",
       "      <td id=\"T_8205e_row11_col7\" class=\"data row11 col7\" >0.0140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row12\" class=\"row_heading level0 row12\" >omp</th>\n",
       "      <td id=\"T_8205e_row12_col0\" class=\"data row12 col0\" >Orthogonal Matching Pursuit</td>\n",
       "      <td id=\"T_8205e_row12_col1\" class=\"data row12 col1\" >0.6888</td>\n",
       "      <td id=\"T_8205e_row12_col2\" class=\"data row12 col2\" >0.8091</td>\n",
       "      <td id=\"T_8205e_row12_col3\" class=\"data row12 col3\" >0.8984</td>\n",
       "      <td id=\"T_8205e_row12_col4\" class=\"data row12 col4\" >0.6837</td>\n",
       "      <td id=\"T_8205e_row12_col5\" class=\"data row12 col5\" >0.2872</td>\n",
       "      <td id=\"T_8205e_row12_col6\" class=\"data row12 col6\" >1.3153</td>\n",
       "      <td id=\"T_8205e_row12_col7\" class=\"data row12 col7\" >0.0110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row13\" class=\"row_heading level0 row13\" >lasso</th>\n",
       "      <td id=\"T_8205e_row13_col0\" class=\"data row13 col0\" >Lasso Regression</td>\n",
       "      <td id=\"T_8205e_row13_col1\" class=\"data row13 col1\" >0.6892</td>\n",
       "      <td id=\"T_8205e_row13_col2\" class=\"data row13 col2\" >0.8098</td>\n",
       "      <td id=\"T_8205e_row13_col3\" class=\"data row13 col3\" >0.8988</td>\n",
       "      <td id=\"T_8205e_row13_col4\" class=\"data row13 col4\" >0.6834</td>\n",
       "      <td id=\"T_8205e_row13_col5\" class=\"data row13 col5\" >0.2866</td>\n",
       "      <td id=\"T_8205e_row13_col6\" class=\"data row13 col6\" >1.3550</td>\n",
       "      <td id=\"T_8205e_row13_col7\" class=\"data row13 col7\" >0.2680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row14\" class=\"row_heading level0 row14\" >llar</th>\n",
       "      <td id=\"T_8205e_row14_col0\" class=\"data row14 col0\" >Lasso Least Angle Regression</td>\n",
       "      <td id=\"T_8205e_row14_col1\" class=\"data row14 col1\" >0.6892</td>\n",
       "      <td id=\"T_8205e_row14_col2\" class=\"data row14 col2\" >0.8097</td>\n",
       "      <td id=\"T_8205e_row14_col3\" class=\"data row14 col3\" >0.8988</td>\n",
       "      <td id=\"T_8205e_row14_col4\" class=\"data row14 col4\" >0.6834</td>\n",
       "      <td id=\"T_8205e_row14_col5\" class=\"data row14 col5\" >0.2866</td>\n",
       "      <td id=\"T_8205e_row14_col6\" class=\"data row14 col6\" >1.3551</td>\n",
       "      <td id=\"T_8205e_row14_col7\" class=\"data row14 col7\" >0.0130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row15\" class=\"row_heading level0 row15\" >ada</th>\n",
       "      <td id=\"T_8205e_row15_col0\" class=\"data row15 col0\" >AdaBoost Regressor</td>\n",
       "      <td id=\"T_8205e_row15_col1\" class=\"data row15 col1\" >0.7285</td>\n",
       "      <td id=\"T_8205e_row15_col2\" class=\"data row15 col2\" >0.8780</td>\n",
       "      <td id=\"T_8205e_row15_col3\" class=\"data row15 col3\" >0.9363</td>\n",
       "      <td id=\"T_8205e_row15_col4\" class=\"data row15 col4\" >0.6565</td>\n",
       "      <td id=\"T_8205e_row15_col5\" class=\"data row15 col5\" >0.2963</td>\n",
       "      <td id=\"T_8205e_row15_col6\" class=\"data row15 col6\" >1.8636</td>\n",
       "      <td id=\"T_8205e_row15_col7\" class=\"data row15 col7\" >0.1260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row16\" class=\"row_heading level0 row16\" >par</th>\n",
       "      <td id=\"T_8205e_row16_col0\" class=\"data row16 col0\" >Passive Aggressive Regressor</td>\n",
       "      <td id=\"T_8205e_row16_col1\" class=\"data row16 col1\" >0.7336</td>\n",
       "      <td id=\"T_8205e_row16_col2\" class=\"data row16 col2\" >0.9723</td>\n",
       "      <td id=\"T_8205e_row16_col3\" class=\"data row16 col3\" >0.9801</td>\n",
       "      <td id=\"T_8205e_row16_col4\" class=\"data row16 col4\" >0.6152</td>\n",
       "      <td id=\"T_8205e_row16_col5\" class=\"data row16 col5\" >0.2977</td>\n",
       "      <td id=\"T_8205e_row16_col6\" class=\"data row16 col6\" >1.4202</td>\n",
       "      <td id=\"T_8205e_row16_col7\" class=\"data row16 col7\" >0.0200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row17\" class=\"row_heading level0 row17\" >dummy</th>\n",
       "      <td id=\"T_8205e_row17_col0\" class=\"data row17 col0\" >Dummy Regressor</td>\n",
       "      <td id=\"T_8205e_row17_col1\" class=\"data row17 col1\" >1.2351</td>\n",
       "      <td id=\"T_8205e_row17_col2\" class=\"data row17 col2\" >2.5617</td>\n",
       "      <td id=\"T_8205e_row17_col3\" class=\"data row17 col3\" >1.5996</td>\n",
       "      <td id=\"T_8205e_row17_col4\" class=\"data row17 col4\" >-0.0013</td>\n",
       "      <td id=\"T_8205e_row17_col5\" class=\"data row17 col5\" >0.4578</td>\n",
       "      <td id=\"T_8205e_row17_col6\" class=\"data row17 col6\" >3.2068</td>\n",
       "      <td id=\"T_8205e_row17_col7\" class=\"data row17 col7\" >0.0100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8205e_level0_row18\" class=\"row_heading level0 row18\" >lar</th>\n",
       "      <td id=\"T_8205e_row18_col0\" class=\"data row18 col0\" >Least Angle Regression</td>\n",
       "      <td id=\"T_8205e_row18_col1\" class=\"data row18 col1\" >1.7486</td>\n",
       "      <td id=\"T_8205e_row18_col2\" class=\"data row18 col2\" >57.1641</td>\n",
       "      <td id=\"T_8205e_row18_col3\" class=\"data row18 col3\" >3.9591</td>\n",
       "      <td id=\"T_8205e_row18_col4\" class=\"data row18 col4\" >-21.4034</td>\n",
       "      <td id=\"T_8205e_row18_col5\" class=\"data row18 col5\" >0.3952</td>\n",
       "      <td id=\"T_8205e_row18_col6\" class=\"data row18 col6\" >2.0110</td>\n",
       "      <td id=\"T_8205e_row18_col7\" class=\"data row18 col7\" >0.0120</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x183168f7c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "setup_rgs = setup(data=X_train, target=y_train,session_id=10)\n",
    "top5 = compare_models(sort='MAE', n_select=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "b82003fc-8dd7-4c5c-925a-6bb05db62d16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[ExtraTreesRegressor(n_jobs=-1, random_state=10),\n",
       " XGBRegressor(base_score=None, booster='gbtree', callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, device='cpu', early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
       "              gamma=None, grow_policy=None, importance_type=None,\n",
       "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
       "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
       "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
       "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
       "              multi_strategy=None, n_estimators=None, n_jobs=-1,\n",
       "              num_parallel_tree=None, random_state=10, ...),\n",
       " RandomForestRegressor(n_jobs=-1, random_state=10),\n",
       " LGBMRegressor(n_jobs=-1, random_state=10),\n",
       " DecisionTreeRegressor(random_state=10)]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "50e22030-103d-4e54-9e2c-597109c3a022",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_d923c_row10_col0, #T_d923c_row10_col1, #T_d923c_row10_col2, #T_d923c_row10_col3, #T_d923c_row10_col4, #T_d923c_row10_col5 {\n",
       "  background: yellow;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_d923c\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_d923c_level0_col0\" class=\"col_heading level0 col0\" >MAE</th>\n",
       "      <th id=\"T_d923c_level0_col1\" class=\"col_heading level0 col1\" >MSE</th>\n",
       "      <th id=\"T_d923c_level0_col2\" class=\"col_heading level0 col2\" >RMSE</th>\n",
       "      <th id=\"T_d923c_level0_col3\" class=\"col_heading level0 col3\" >R2</th>\n",
       "      <th id=\"T_d923c_level0_col4\" class=\"col_heading level0 col4\" >RMSLE</th>\n",
       "      <th id=\"T_d923c_level0_col5\" class=\"col_heading level0 col5\" >MAPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th class=\"index_name level0\" >Fold</th>\n",
       "      <th class=\"blank col0\" >&nbsp;</th>\n",
       "      <th class=\"blank col1\" >&nbsp;</th>\n",
       "      <th class=\"blank col2\" >&nbsp;</th>\n",
       "      <th class=\"blank col3\" >&nbsp;</th>\n",
       "      <th class=\"blank col4\" >&nbsp;</th>\n",
       "      <th class=\"blank col5\" >&nbsp;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_d923c_row0_col0\" class=\"data row0 col0\" >0.6727</td>\n",
       "      <td id=\"T_d923c_row0_col1\" class=\"data row0 col1\" >0.8730</td>\n",
       "      <td id=\"T_d923c_row0_col2\" class=\"data row0 col2\" >0.9344</td>\n",
       "      <td id=\"T_d923c_row0_col3\" class=\"data row0 col3\" >0.6857</td>\n",
       "      <td id=\"T_d923c_row0_col4\" class=\"data row0 col4\" >0.2808</td>\n",
       "      <td id=\"T_d923c_row0_col5\" class=\"data row0 col5\" >2.1301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_d923c_row1_col0\" class=\"data row1 col0\" >0.6426</td>\n",
       "      <td id=\"T_d923c_row1_col1\" class=\"data row1 col1\" >0.7407</td>\n",
       "      <td id=\"T_d923c_row1_col2\" class=\"data row1 col2\" >0.8606</td>\n",
       "      <td id=\"T_d923c_row1_col3\" class=\"data row1 col3\" >0.7124</td>\n",
       "      <td id=\"T_d923c_row1_col4\" class=\"data row1 col4\" >0.2652</td>\n",
       "      <td id=\"T_d923c_row1_col5\" class=\"data row1 col5\" >1.1947</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_d923c_row2_col0\" class=\"data row2 col0\" >0.6109</td>\n",
       "      <td id=\"T_d923c_row2_col1\" class=\"data row2 col1\" >0.6609</td>\n",
       "      <td id=\"T_d923c_row2_col2\" class=\"data row2 col2\" >0.8130</td>\n",
       "      <td id=\"T_d923c_row2_col3\" class=\"data row2 col3\" >0.7482</td>\n",
       "      <td id=\"T_d923c_row2_col4\" class=\"data row2 col4\" >0.2500</td>\n",
       "      <td id=\"T_d923c_row2_col5\" class=\"data row2 col5\" >1.7476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_d923c_row3_col0\" class=\"data row3 col0\" >0.6283</td>\n",
       "      <td id=\"T_d923c_row3_col1\" class=\"data row3 col1\" >0.6727</td>\n",
       "      <td id=\"T_d923c_row3_col2\" class=\"data row3 col2\" >0.8202</td>\n",
       "      <td id=\"T_d923c_row3_col3\" class=\"data row3 col3\" >0.7207</td>\n",
       "      <td id=\"T_d923c_row3_col4\" class=\"data row3 col4\" >0.2694</td>\n",
       "      <td id=\"T_d923c_row3_col5\" class=\"data row3 col5\" >1.9883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_d923c_row4_col0\" class=\"data row4 col0\" >0.6196</td>\n",
       "      <td id=\"T_d923c_row4_col1\" class=\"data row4 col1\" >0.6870</td>\n",
       "      <td id=\"T_d923c_row4_col2\" class=\"data row4 col2\" >0.8288</td>\n",
       "      <td id=\"T_d923c_row4_col3\" class=\"data row4 col3\" >0.7161</td>\n",
       "      <td id=\"T_d923c_row4_col4\" class=\"data row4 col4\" >0.2532</td>\n",
       "      <td id=\"T_d923c_row4_col5\" class=\"data row4 col5\" >1.0094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_d923c_row5_col0\" class=\"data row5 col0\" >0.5966</td>\n",
       "      <td id=\"T_d923c_row5_col1\" class=\"data row5 col1\" >0.6199</td>\n",
       "      <td id=\"T_d923c_row5_col2\" class=\"data row5 col2\" >0.7873</td>\n",
       "      <td id=\"T_d923c_row5_col3\" class=\"data row5 col3\" >0.7517</td>\n",
       "      <td id=\"T_d923c_row5_col4\" class=\"data row5 col4\" >0.2510</td>\n",
       "      <td id=\"T_d923c_row5_col5\" class=\"data row5 col5\" >2.2605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_d923c_row6_col0\" class=\"data row6 col0\" >0.6630</td>\n",
       "      <td id=\"T_d923c_row6_col1\" class=\"data row6 col1\" >0.9281</td>\n",
       "      <td id=\"T_d923c_row6_col2\" class=\"data row6 col2\" >0.9634</td>\n",
       "      <td id=\"T_d923c_row6_col3\" class=\"data row6 col3\" >0.6867</td>\n",
       "      <td id=\"T_d923c_row6_col4\" class=\"data row6 col4\" >0.2671</td>\n",
       "      <td id=\"T_d923c_row6_col5\" class=\"data row6 col5\" >1.1723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_d923c_row7_col0\" class=\"data row7 col0\" >0.6348</td>\n",
       "      <td id=\"T_d923c_row7_col1\" class=\"data row7 col1\" >0.6875</td>\n",
       "      <td id=\"T_d923c_row7_col2\" class=\"data row7 col2\" >0.8291</td>\n",
       "      <td id=\"T_d923c_row7_col3\" class=\"data row7 col3\" >0.7261</td>\n",
       "      <td id=\"T_d923c_row7_col4\" class=\"data row7 col4\" >0.2666</td>\n",
       "      <td id=\"T_d923c_row7_col5\" class=\"data row7 col5\" >2.6165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_d923c_row8_col0\" class=\"data row8 col0\" >0.6129</td>\n",
       "      <td id=\"T_d923c_row8_col1\" class=\"data row8 col1\" >0.6406</td>\n",
       "      <td id=\"T_d923c_row8_col2\" class=\"data row8 col2\" >0.8004</td>\n",
       "      <td id=\"T_d923c_row8_col3\" class=\"data row8 col3\" >0.7267</td>\n",
       "      <td id=\"T_d923c_row8_col4\" class=\"data row8 col4\" >0.2501</td>\n",
       "      <td id=\"T_d923c_row8_col5\" class=\"data row8 col5\" >0.7585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_d923c_row9_col0\" class=\"data row9 col0\" >0.6224</td>\n",
       "      <td id=\"T_d923c_row9_col1\" class=\"data row9 col1\" >0.6578</td>\n",
       "      <td id=\"T_d923c_row9_col2\" class=\"data row9 col2\" >0.8111</td>\n",
       "      <td id=\"T_d923c_row9_col3\" class=\"data row9 col3\" >0.7333</td>\n",
       "      <td id=\"T_d923c_row9_col4\" class=\"data row9 col4\" >0.2565</td>\n",
       "      <td id=\"T_d923c_row9_col5\" class=\"data row9 col5\" >0.9106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
       "      <td id=\"T_d923c_row10_col0\" class=\"data row10 col0\" >0.6304</td>\n",
       "      <td id=\"T_d923c_row10_col1\" class=\"data row10 col1\" >0.7168</td>\n",
       "      <td id=\"T_d923c_row10_col2\" class=\"data row10 col2\" >0.8448</td>\n",
       "      <td id=\"T_d923c_row10_col3\" class=\"data row10 col3\" >0.7208</td>\n",
       "      <td id=\"T_d923c_row10_col4\" class=\"data row10 col4\" >0.2610</td>\n",
       "      <td id=\"T_d923c_row10_col5\" class=\"data row10 col5\" >1.5789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d923c_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
       "      <td id=\"T_d923c_row11_col0\" class=\"data row11 col0\" >0.0224</td>\n",
       "      <td id=\"T_d923c_row11_col1\" class=\"data row11 col1\" >0.0975</td>\n",
       "      <td id=\"T_d923c_row11_col2\" class=\"data row11 col2\" >0.0556</td>\n",
       "      <td id=\"T_d923c_row11_col3\" class=\"data row11 col3\" >0.0210</td>\n",
       "      <td id=\"T_d923c_row11_col4\" class=\"data row11 col4\" >0.0099</td>\n",
       "      <td id=\"T_d923c_row11_col5\" class=\"data row11 col5\" >0.6163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x182ad6dab50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 10 candidates, totalling 100 fits\n",
      "Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_fcd06_row10_col0, #T_fcd06_row10_col1, #T_fcd06_row10_col2, #T_fcd06_row10_col3, #T_fcd06_row10_col4, #T_fcd06_row10_col5 {\n",
       "  background: yellow;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_fcd06\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_fcd06_level0_col0\" class=\"col_heading level0 col0\" >MAE</th>\n",
       "      <th id=\"T_fcd06_level0_col1\" class=\"col_heading level0 col1\" >MSE</th>\n",
       "      <th id=\"T_fcd06_level0_col2\" class=\"col_heading level0 col2\" >RMSE</th>\n",
       "      <th id=\"T_fcd06_level0_col3\" class=\"col_heading level0 col3\" >R2</th>\n",
       "      <th id=\"T_fcd06_level0_col4\" class=\"col_heading level0 col4\" >RMSLE</th>\n",
       "      <th id=\"T_fcd06_level0_col5\" class=\"col_heading level0 col5\" >MAPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th class=\"index_name level0\" >Fold</th>\n",
       "      <th class=\"blank col0\" >&nbsp;</th>\n",
       "      <th class=\"blank col1\" >&nbsp;</th>\n",
       "      <th class=\"blank col2\" >&nbsp;</th>\n",
       "      <th class=\"blank col3\" >&nbsp;</th>\n",
       "      <th class=\"blank col4\" >&nbsp;</th>\n",
       "      <th class=\"blank col5\" >&nbsp;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_fcd06_row0_col0\" class=\"data row0 col0\" >0.3583</td>\n",
       "      <td id=\"T_fcd06_row0_col1\" class=\"data row0 col1\" >0.3072</td>\n",
       "      <td id=\"T_fcd06_row0_col2\" class=\"data row0 col2\" >0.5542</td>\n",
       "      <td id=\"T_fcd06_row0_col3\" class=\"data row0 col3\" >0.8894</td>\n",
       "      <td id=\"T_fcd06_row0_col4\" class=\"data row0 col4\" >0.1926</td>\n",
       "      <td id=\"T_fcd06_row0_col5\" class=\"data row0 col5\" >1.2707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_fcd06_row1_col0\" class=\"data row1 col0\" >0.3474</td>\n",
       "      <td id=\"T_fcd06_row1_col1\" class=\"data row1 col1\" >0.2661</td>\n",
       "      <td id=\"T_fcd06_row1_col2\" class=\"data row1 col2\" >0.5159</td>\n",
       "      <td id=\"T_fcd06_row1_col3\" class=\"data row1 col3\" >0.8967</td>\n",
       "      <td id=\"T_fcd06_row1_col4\" class=\"data row1 col4\" >0.1755</td>\n",
       "      <td id=\"T_fcd06_row1_col5\" class=\"data row1 col5\" >0.4539</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_fcd06_row2_col0\" class=\"data row2 col0\" >0.3405</td>\n",
       "      <td id=\"T_fcd06_row2_col1\" class=\"data row2 col1\" >0.2474</td>\n",
       "      <td id=\"T_fcd06_row2_col2\" class=\"data row2 col2\" >0.4974</td>\n",
       "      <td id=\"T_fcd06_row2_col3\" class=\"data row2 col3\" >0.9058</td>\n",
       "      <td id=\"T_fcd06_row2_col4\" class=\"data row2 col4\" >0.1816</td>\n",
       "      <td id=\"T_fcd06_row2_col5\" class=\"data row2 col5\" >0.9370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_fcd06_row3_col0\" class=\"data row3 col0\" >0.3449</td>\n",
       "      <td id=\"T_fcd06_row3_col1\" class=\"data row3 col1\" >0.2403</td>\n",
       "      <td id=\"T_fcd06_row3_col2\" class=\"data row3 col2\" >0.4902</td>\n",
       "      <td id=\"T_fcd06_row3_col3\" class=\"data row3 col3\" >0.9002</td>\n",
       "      <td id=\"T_fcd06_row3_col4\" class=\"data row3 col4\" >0.1802</td>\n",
       "      <td id=\"T_fcd06_row3_col5\" class=\"data row3 col5\" >0.6220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_fcd06_row4_col0\" class=\"data row4 col0\" >0.3578</td>\n",
       "      <td id=\"T_fcd06_row4_col1\" class=\"data row4 col1\" >0.2658</td>\n",
       "      <td id=\"T_fcd06_row4_col2\" class=\"data row4 col2\" >0.5156</td>\n",
       "      <td id=\"T_fcd06_row4_col3\" class=\"data row4 col3\" >0.8901</td>\n",
       "      <td id=\"T_fcd06_row4_col4\" class=\"data row4 col4\" >0.1780</td>\n",
       "      <td id=\"T_fcd06_row4_col5\" class=\"data row4 col5\" >0.4851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_fcd06_row5_col0\" class=\"data row5 col0\" >0.3256</td>\n",
       "      <td id=\"T_fcd06_row5_col1\" class=\"data row5 col1\" >0.2120</td>\n",
       "      <td id=\"T_fcd06_row5_col2\" class=\"data row5 col2\" >0.4604</td>\n",
       "      <td id=\"T_fcd06_row5_col3\" class=\"data row5 col3\" >0.9151</td>\n",
       "      <td id=\"T_fcd06_row5_col4\" class=\"data row5 col4\" >0.1703</td>\n",
       "      <td id=\"T_fcd06_row5_col5\" class=\"data row5 col5\" >0.7969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_fcd06_row6_col0\" class=\"data row6 col0\" >0.3777</td>\n",
       "      <td id=\"T_fcd06_row6_col1\" class=\"data row6 col1\" >0.4281</td>\n",
       "      <td id=\"T_fcd06_row6_col2\" class=\"data row6 col2\" >0.6543</td>\n",
       "      <td id=\"T_fcd06_row6_col3\" class=\"data row6 col3\" >0.8555</td>\n",
       "      <td id=\"T_fcd06_row6_col4\" class=\"data row6 col4\" >0.1891</td>\n",
       "      <td id=\"T_fcd06_row6_col5\" class=\"data row6 col5\" >0.8082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_fcd06_row7_col0\" class=\"data row7 col0\" >0.3342</td>\n",
       "      <td id=\"T_fcd06_row7_col1\" class=\"data row7 col1\" >0.2479</td>\n",
       "      <td id=\"T_fcd06_row7_col2\" class=\"data row7 col2\" >0.4979</td>\n",
       "      <td id=\"T_fcd06_row7_col3\" class=\"data row7 col3\" >0.9012</td>\n",
       "      <td id=\"T_fcd06_row7_col4\" class=\"data row7 col4\" >0.1668</td>\n",
       "      <td id=\"T_fcd06_row7_col5\" class=\"data row7 col5\" >0.9671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_fcd06_row8_col0\" class=\"data row8 col0\" >0.3120</td>\n",
       "      <td id=\"T_fcd06_row8_col1\" class=\"data row8 col1\" >0.1915</td>\n",
       "      <td id=\"T_fcd06_row8_col2\" class=\"data row8 col2\" >0.4376</td>\n",
       "      <td id=\"T_fcd06_row8_col3\" class=\"data row8 col3\" >0.9183</td>\n",
       "      <td id=\"T_fcd06_row8_col4\" class=\"data row8 col4\" >0.1533</td>\n",
       "      <td id=\"T_fcd06_row8_col5\" class=\"data row8 col5\" >0.3086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_fcd06_row9_col0\" class=\"data row9 col0\" >0.3367</td>\n",
       "      <td id=\"T_fcd06_row9_col1\" class=\"data row9 col1\" >0.2233</td>\n",
       "      <td id=\"T_fcd06_row9_col2\" class=\"data row9 col2\" >0.4725</td>\n",
       "      <td id=\"T_fcd06_row9_col3\" class=\"data row9 col3\" >0.9095</td>\n",
       "      <td id=\"T_fcd06_row9_col4\" class=\"data row9 col4\" >0.1807</td>\n",
       "      <td id=\"T_fcd06_row9_col5\" class=\"data row9 col5\" >0.4407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
       "      <td id=\"T_fcd06_row10_col0\" class=\"data row10 col0\" >0.3435</td>\n",
       "      <td id=\"T_fcd06_row10_col1\" class=\"data row10 col1\" >0.2630</td>\n",
       "      <td id=\"T_fcd06_row10_col2\" class=\"data row10 col2\" >0.5096</td>\n",
       "      <td id=\"T_fcd06_row10_col3\" class=\"data row10 col3\" >0.8982</td>\n",
       "      <td id=\"T_fcd06_row10_col4\" class=\"data row10 col4\" >0.1768</td>\n",
       "      <td id=\"T_fcd06_row10_col5\" class=\"data row10 col5\" >0.7090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_fcd06_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
       "      <td id=\"T_fcd06_row11_col0\" class=\"data row11 col0\" >0.0175</td>\n",
       "      <td id=\"T_fcd06_row11_col1\" class=\"data row11 col1\" >0.0628</td>\n",
       "      <td id=\"T_fcd06_row11_col2\" class=\"data row11 col2\" >0.0571</td>\n",
       "      <td id=\"T_fcd06_row11_col3\" class=\"data row11 col3\" >0.0169</td>\n",
       "      <td id=\"T_fcd06_row11_col4\" class=\"data row11 col4\" >0.0107</td>\n",
       "      <td id=\"T_fcd06_row11_col5\" class=\"data row11 col5\" >0.2840</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x183160ca550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 10 candidates, totalling 100 fits\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_3d47c_row10_col0, #T_3d47c_row10_col1, #T_3d47c_row10_col2, #T_3d47c_row10_col3, #T_3d47c_row10_col4, #T_3d47c_row10_col5 {\n",
       "  background: yellow;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_3d47c\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_3d47c_level0_col0\" class=\"col_heading level0 col0\" >MAE</th>\n",
       "      <th id=\"T_3d47c_level0_col1\" class=\"col_heading level0 col1\" >MSE</th>\n",
       "      <th id=\"T_3d47c_level0_col2\" class=\"col_heading level0 col2\" >RMSE</th>\n",
       "      <th id=\"T_3d47c_level0_col3\" class=\"col_heading level0 col3\" >R2</th>\n",
       "      <th id=\"T_3d47c_level0_col4\" class=\"col_heading level0 col4\" >RMSLE</th>\n",
       "      <th id=\"T_3d47c_level0_col5\" class=\"col_heading level0 col5\" >MAPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th class=\"index_name level0\" >Fold</th>\n",
       "      <th class=\"blank col0\" >&nbsp;</th>\n",
       "      <th class=\"blank col1\" >&nbsp;</th>\n",
       "      <th class=\"blank col2\" >&nbsp;</th>\n",
       "      <th class=\"blank col3\" >&nbsp;</th>\n",
       "      <th class=\"blank col4\" >&nbsp;</th>\n",
       "      <th class=\"blank col5\" >&nbsp;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_3d47c_row0_col0\" class=\"data row0 col0\" >0.6547</td>\n",
       "      <td id=\"T_3d47c_row0_col1\" class=\"data row0 col1\" >0.8138</td>\n",
       "      <td id=\"T_3d47c_row0_col2\" class=\"data row0 col2\" >0.9021</td>\n",
       "      <td id=\"T_3d47c_row0_col3\" class=\"data row0 col3\" >0.7071</td>\n",
       "      <td id=\"T_3d47c_row0_col4\" class=\"data row0 col4\" >0.2753</td>\n",
       "      <td id=\"T_3d47c_row0_col5\" class=\"data row0 col5\" >1.9907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_3d47c_row1_col0\" class=\"data row1 col0\" >0.6351</td>\n",
       "      <td id=\"T_3d47c_row1_col1\" class=\"data row1 col1\" >0.7063</td>\n",
       "      <td id=\"T_3d47c_row1_col2\" class=\"data row1 col2\" >0.8404</td>\n",
       "      <td id=\"T_3d47c_row1_col3\" class=\"data row1 col3\" >0.7257</td>\n",
       "      <td id=\"T_3d47c_row1_col4\" class=\"data row1 col4\" >0.2630</td>\n",
       "      <td id=\"T_3d47c_row1_col5\" class=\"data row1 col5\" >1.1697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_3d47c_row2_col0\" class=\"data row2 col0\" >0.6028</td>\n",
       "      <td id=\"T_3d47c_row2_col1\" class=\"data row2 col1\" >0.6144</td>\n",
       "      <td id=\"T_3d47c_row2_col2\" class=\"data row2 col2\" >0.7839</td>\n",
       "      <td id=\"T_3d47c_row2_col3\" class=\"data row2 col3\" >0.7659</td>\n",
       "      <td id=\"T_3d47c_row2_col4\" class=\"data row2 col4\" >0.2512</td>\n",
       "      <td id=\"T_3d47c_row2_col5\" class=\"data row2 col5\" >1.8548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_3d47c_row3_col0\" class=\"data row3 col0\" >0.6036</td>\n",
       "      <td id=\"T_3d47c_row3_col1\" class=\"data row3 col1\" >0.6223</td>\n",
       "      <td id=\"T_3d47c_row3_col2\" class=\"data row3 col2\" >0.7889</td>\n",
       "      <td id=\"T_3d47c_row3_col3\" class=\"data row3 col3\" >0.7416</td>\n",
       "      <td id=\"T_3d47c_row3_col4\" class=\"data row3 col4\" >0.2644</td>\n",
       "      <td id=\"T_3d47c_row3_col5\" class=\"data row3 col5\" >2.0448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_3d47c_row4_col0\" class=\"data row4 col0\" >0.6092</td>\n",
       "      <td id=\"T_3d47c_row4_col1\" class=\"data row4 col1\" >0.6624</td>\n",
       "      <td id=\"T_3d47c_row4_col2\" class=\"data row4 col2\" >0.8139</td>\n",
       "      <td id=\"T_3d47c_row4_col3\" class=\"data row4 col3\" >0.7263</td>\n",
       "      <td id=\"T_3d47c_row4_col4\" class=\"data row4 col4\" >0.2491</td>\n",
       "      <td id=\"T_3d47c_row4_col5\" class=\"data row4 col5\" >0.9664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_3d47c_row5_col0\" class=\"data row5 col0\" >0.5875</td>\n",
       "      <td id=\"T_3d47c_row5_col1\" class=\"data row5 col1\" >0.5855</td>\n",
       "      <td id=\"T_3d47c_row5_col2\" class=\"data row5 col2\" >0.7652</td>\n",
       "      <td id=\"T_3d47c_row5_col3\" class=\"data row5 col3\" >0.7655</td>\n",
       "      <td id=\"T_3d47c_row5_col4\" class=\"data row5 col4\" >0.2532</td>\n",
       "      <td id=\"T_3d47c_row5_col5\" class=\"data row5 col5\" >2.1975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_3d47c_row6_col0\" class=\"data row6 col0\" >0.6505</td>\n",
       "      <td id=\"T_3d47c_row6_col1\" class=\"data row6 col1\" >0.9056</td>\n",
       "      <td id=\"T_3d47c_row6_col2\" class=\"data row6 col2\" >0.9516</td>\n",
       "      <td id=\"T_3d47c_row6_col3\" class=\"data row6 col3\" >0.6943</td>\n",
       "      <td id=\"T_3d47c_row6_col4\" class=\"data row6 col4\" >0.2700</td>\n",
       "      <td id=\"T_3d47c_row6_col5\" class=\"data row6 col5\" >1.2027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_3d47c_row7_col0\" class=\"data row7 col0\" >0.6141</td>\n",
       "      <td id=\"T_3d47c_row7_col1\" class=\"data row7 col1\" >0.6505</td>\n",
       "      <td id=\"T_3d47c_row7_col2\" class=\"data row7 col2\" >0.8065</td>\n",
       "      <td id=\"T_3d47c_row7_col3\" class=\"data row7 col3\" >0.7408</td>\n",
       "      <td id=\"T_3d47c_row7_col4\" class=\"data row7 col4\" >0.2648</td>\n",
       "      <td id=\"T_3d47c_row7_col5\" class=\"data row7 col5\" >2.4017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_3d47c_row8_col0\" class=\"data row8 col0\" >0.5795</td>\n",
       "      <td id=\"T_3d47c_row8_col1\" class=\"data row8 col1\" >0.5704</td>\n",
       "      <td id=\"T_3d47c_row8_col2\" class=\"data row8 col2\" >0.7552</td>\n",
       "      <td id=\"T_3d47c_row8_col3\" class=\"data row8 col3\" >0.7566</td>\n",
       "      <td id=\"T_3d47c_row8_col4\" class=\"data row8 col4\" >0.2449</td>\n",
       "      <td id=\"T_3d47c_row8_col5\" class=\"data row8 col5\" >0.7383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_3d47c_row9_col0\" class=\"data row9 col0\" >0.6035</td>\n",
       "      <td id=\"T_3d47c_row9_col1\" class=\"data row9 col1\" >0.6193</td>\n",
       "      <td id=\"T_3d47c_row9_col2\" class=\"data row9 col2\" >0.7870</td>\n",
       "      <td id=\"T_3d47c_row9_col3\" class=\"data row9 col3\" >0.7489</td>\n",
       "      <td id=\"T_3d47c_row9_col4\" class=\"data row9 col4\" >0.2544</td>\n",
       "      <td id=\"T_3d47c_row9_col5\" class=\"data row9 col5\" >0.9324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
       "      <td id=\"T_3d47c_row10_col0\" class=\"data row10 col0\" >0.6141</td>\n",
       "      <td id=\"T_3d47c_row10_col1\" class=\"data row10 col1\" >0.6750</td>\n",
       "      <td id=\"T_3d47c_row10_col2\" class=\"data row10 col2\" >0.8195</td>\n",
       "      <td id=\"T_3d47c_row10_col3\" class=\"data row10 col3\" >0.7373</td>\n",
       "      <td id=\"T_3d47c_row10_col4\" class=\"data row10 col4\" >0.2590</td>\n",
       "      <td id=\"T_3d47c_row10_col5\" class=\"data row10 col5\" >1.5499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_3d47c_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
       "      <td id=\"T_3d47c_row11_col0\" class=\"data row11 col0\" >0.0239</td>\n",
       "      <td id=\"T_3d47c_row11_col1\" class=\"data row11 col1\" >0.1013</td>\n",
       "      <td id=\"T_3d47c_row11_col2\" class=\"data row11 col2\" >0.0594</td>\n",
       "      <td id=\"T_3d47c_row11_col3\" class=\"data row11 col3\" >0.0227</td>\n",
       "      <td id=\"T_3d47c_row11_col4\" class=\"data row11 col4\" >0.0094</td>\n",
       "      <td id=\"T_3d47c_row11_col5\" class=\"data row11 col5\" >0.5764</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18316159c90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 10 candidates, totalling 100 fits\n",
      "Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).\n"
     ]
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_15b1a_row10_col0, #T_15b1a_row10_col1, #T_15b1a_row10_col2, #T_15b1a_row10_col3, #T_15b1a_row10_col4, #T_15b1a_row10_col5 {\n",
       "  background: yellow;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_15b1a\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_15b1a_level0_col0\" class=\"col_heading level0 col0\" >MAE</th>\n",
       "      <th id=\"T_15b1a_level0_col1\" class=\"col_heading level0 col1\" >MSE</th>\n",
       "      <th id=\"T_15b1a_level0_col2\" class=\"col_heading level0 col2\" >RMSE</th>\n",
       "      <th id=\"T_15b1a_level0_col3\" class=\"col_heading level0 col3\" >R2</th>\n",
       "      <th id=\"T_15b1a_level0_col4\" class=\"col_heading level0 col4\" >RMSLE</th>\n",
       "      <th id=\"T_15b1a_level0_col5\" class=\"col_heading level0 col5\" >MAPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th class=\"index_name level0\" >Fold</th>\n",
       "      <th class=\"blank col0\" >&nbsp;</th>\n",
       "      <th class=\"blank col1\" >&nbsp;</th>\n",
       "      <th class=\"blank col2\" >&nbsp;</th>\n",
       "      <th class=\"blank col3\" >&nbsp;</th>\n",
       "      <th class=\"blank col4\" >&nbsp;</th>\n",
       "      <th class=\"blank col5\" >&nbsp;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_15b1a_row0_col0\" class=\"data row0 col0\" >0.4749</td>\n",
       "      <td id=\"T_15b1a_row0_col1\" class=\"data row0 col1\" >0.4429</td>\n",
       "      <td id=\"T_15b1a_row0_col2\" class=\"data row0 col2\" >0.6655</td>\n",
       "      <td id=\"T_15b1a_row0_col3\" class=\"data row0 col3\" >0.8405</td>\n",
       "      <td id=\"T_15b1a_row0_col4\" class=\"data row0 col4\" >0.2311</td>\n",
       "      <td id=\"T_15b1a_row0_col5\" class=\"data row0 col5\" >1.4113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_15b1a_row1_col0\" class=\"data row1 col0\" >0.4671</td>\n",
       "      <td id=\"T_15b1a_row1_col1\" class=\"data row1 col1\" >0.4080</td>\n",
       "      <td id=\"T_15b1a_row1_col2\" class=\"data row1 col2\" >0.6387</td>\n",
       "      <td id=\"T_15b1a_row1_col3\" class=\"data row1 col3\" >0.8416</td>\n",
       "      <td id=\"T_15b1a_row1_col4\" class=\"data row1 col4\" >0.2127</td>\n",
       "      <td id=\"T_15b1a_row1_col5\" class=\"data row1 col5\" >0.6249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_15b1a_row2_col0\" class=\"data row2 col0\" >0.4413</td>\n",
       "      <td id=\"T_15b1a_row2_col1\" class=\"data row2 col1\" >0.3456</td>\n",
       "      <td id=\"T_15b1a_row2_col2\" class=\"data row2 col2\" >0.5879</td>\n",
       "      <td id=\"T_15b1a_row2_col3\" class=\"data row2 col3\" >0.8683</td>\n",
       "      <td id=\"T_15b1a_row2_col4\" class=\"data row2 col4\" >0.2140</td>\n",
       "      <td id=\"T_15b1a_row2_col5\" class=\"data row2 col5\" >1.0028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_15b1a_row3_col0\" class=\"data row3 col0\" >0.4624</td>\n",
       "      <td id=\"T_15b1a_row3_col1\" class=\"data row3 col1\" >0.3615</td>\n",
       "      <td id=\"T_15b1a_row3_col2\" class=\"data row3 col2\" >0.6013</td>\n",
       "      <td id=\"T_15b1a_row3_col3\" class=\"data row3 col3\" >0.8499</td>\n",
       "      <td id=\"T_15b1a_row3_col4\" class=\"data row3 col4\" >0.2156</td>\n",
       "      <td id=\"T_15b1a_row3_col5\" class=\"data row3 col5\" >0.7751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_15b1a_row4_col0\" class=\"data row4 col0\" >0.4587</td>\n",
       "      <td id=\"T_15b1a_row4_col1\" class=\"data row4 col1\" >0.3796</td>\n",
       "      <td id=\"T_15b1a_row4_col2\" class=\"data row4 col2\" >0.6161</td>\n",
       "      <td id=\"T_15b1a_row4_col3\" class=\"data row4 col3\" >0.8431</td>\n",
       "      <td id=\"T_15b1a_row4_col4\" class=\"data row4 col4\" >0.2148</td>\n",
       "      <td id=\"T_15b1a_row4_col5\" class=\"data row4 col5\" >0.5488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_15b1a_row5_col0\" class=\"data row5 col0\" >0.4613</td>\n",
       "      <td id=\"T_15b1a_row5_col1\" class=\"data row5 col1\" >0.3620</td>\n",
       "      <td id=\"T_15b1a_row5_col2\" class=\"data row5 col2\" >0.6016</td>\n",
       "      <td id=\"T_15b1a_row5_col3\" class=\"data row5 col3\" >0.8550</td>\n",
       "      <td id=\"T_15b1a_row5_col4\" class=\"data row5 col4\" >0.2153</td>\n",
       "      <td id=\"T_15b1a_row5_col5\" class=\"data row5 col5\" >0.8387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_15b1a_row6_col0\" class=\"data row6 col0\" >0.5107</td>\n",
       "      <td id=\"T_15b1a_row6_col1\" class=\"data row6 col1\" >0.5905</td>\n",
       "      <td id=\"T_15b1a_row6_col2\" class=\"data row6 col2\" >0.7684</td>\n",
       "      <td id=\"T_15b1a_row6_col3\" class=\"data row6 col3\" >0.8007</td>\n",
       "      <td id=\"T_15b1a_row6_col4\" class=\"data row6 col4\" >0.2351</td>\n",
       "      <td id=\"T_15b1a_row6_col5\" class=\"data row6 col5\" >0.9687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_15b1a_row7_col0\" class=\"data row7 col0\" >0.4386</td>\n",
       "      <td id=\"T_15b1a_row7_col1\" class=\"data row7 col1\" >0.3521</td>\n",
       "      <td id=\"T_15b1a_row7_col2\" class=\"data row7 col2\" >0.5934</td>\n",
       "      <td id=\"T_15b1a_row7_col3\" class=\"data row7 col3\" >0.8597</td>\n",
       "      <td id=\"T_15b1a_row7_col4\" class=\"data row7 col4\" >0.2091</td>\n",
       "      <td id=\"T_15b1a_row7_col5\" class=\"data row7 col5\" >0.6810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_15b1a_row8_col0\" class=\"data row8 col0\" >0.4148</td>\n",
       "      <td id=\"T_15b1a_row8_col1\" class=\"data row8 col1\" >0.3005</td>\n",
       "      <td id=\"T_15b1a_row8_col2\" class=\"data row8 col2\" >0.5482</td>\n",
       "      <td id=\"T_15b1a_row8_col3\" class=\"data row8 col3\" >0.8718</td>\n",
       "      <td id=\"T_15b1a_row8_col4\" class=\"data row8 col4\" >0.1939</td>\n",
       "      <td id=\"T_15b1a_row8_col5\" class=\"data row8 col5\" >0.4646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_15b1a_row9_col0\" class=\"data row9 col0\" >0.4557</td>\n",
       "      <td id=\"T_15b1a_row9_col1\" class=\"data row9 col1\" >0.3587</td>\n",
       "      <td id=\"T_15b1a_row9_col2\" class=\"data row9 col2\" >0.5990</td>\n",
       "      <td id=\"T_15b1a_row9_col3\" class=\"data row9 col3\" >0.8546</td>\n",
       "      <td id=\"T_15b1a_row9_col4\" class=\"data row9 col4\" >0.2239</td>\n",
       "      <td id=\"T_15b1a_row9_col5\" class=\"data row9 col5\" >0.5955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
       "      <td id=\"T_15b1a_row10_col0\" class=\"data row10 col0\" >0.4586</td>\n",
       "      <td id=\"T_15b1a_row10_col1\" class=\"data row10 col1\" >0.3901</td>\n",
       "      <td id=\"T_15b1a_row10_col2\" class=\"data row10 col2\" >0.6220</td>\n",
       "      <td id=\"T_15b1a_row10_col3\" class=\"data row10 col3\" >0.8485</td>\n",
       "      <td id=\"T_15b1a_row10_col4\" class=\"data row10 col4\" >0.2166</td>\n",
       "      <td id=\"T_15b1a_row10_col5\" class=\"data row10 col5\" >0.7911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_15b1a_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
       "      <td id=\"T_15b1a_row11_col0\" class=\"data row11 col0\" >0.0239</td>\n",
       "      <td id=\"T_15b1a_row11_col1\" class=\"data row11 col1\" >0.0758</td>\n",
       "      <td id=\"T_15b1a_row11_col2\" class=\"data row11 col2\" >0.0570</td>\n",
       "      <td id=\"T_15b1a_row11_col3\" class=\"data row11 col3\" >0.0189</td>\n",
       "      <td id=\"T_15b1a_row11_col4\" class=\"data row11 col4\" >0.0110</td>\n",
       "      <td id=\"T_15b1a_row11_col5\" class=\"data row11 col5\" >0.2659</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x183160bf490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 10 candidates, totalling 100 fits\n",
      "Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).\n"
     ]
    }
   ],
   "source": [
    "selected_models = top5[:4]\n",
    "tuned = [tune_model(i) for i in selected_models]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d8bb5be8-9da8-413e-8218-8dc3884a23a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_edd9d_row10_col0, #T_edd9d_row10_col1, #T_edd9d_row10_col2, #T_edd9d_row10_col3, #T_edd9d_row10_col4, #T_edd9d_row10_col5 {\n",
       "  background: yellow;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_edd9d\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_edd9d_level0_col0\" class=\"col_heading level0 col0\" >MAE</th>\n",
       "      <th id=\"T_edd9d_level0_col1\" class=\"col_heading level0 col1\" >MSE</th>\n",
       "      <th id=\"T_edd9d_level0_col2\" class=\"col_heading level0 col2\" >RMSE</th>\n",
       "      <th id=\"T_edd9d_level0_col3\" class=\"col_heading level0 col3\" >R2</th>\n",
       "      <th id=\"T_edd9d_level0_col4\" class=\"col_heading level0 col4\" >RMSLE</th>\n",
       "      <th id=\"T_edd9d_level0_col5\" class=\"col_heading level0 col5\" >MAPE</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th class=\"index_name level0\" >Fold</th>\n",
       "      <th class=\"blank col0\" >&nbsp;</th>\n",
       "      <th class=\"blank col1\" >&nbsp;</th>\n",
       "      <th class=\"blank col2\" >&nbsp;</th>\n",
       "      <th class=\"blank col3\" >&nbsp;</th>\n",
       "      <th class=\"blank col4\" >&nbsp;</th>\n",
       "      <th class=\"blank col5\" >&nbsp;</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
       "      <td id=\"T_edd9d_row0_col0\" class=\"data row0 col0\" >0.3597</td>\n",
       "      <td id=\"T_edd9d_row0_col1\" class=\"data row0 col1\" >0.3095</td>\n",
       "      <td id=\"T_edd9d_row0_col2\" class=\"data row0 col2\" >0.5563</td>\n",
       "      <td id=\"T_edd9d_row0_col3\" class=\"data row0 col3\" >0.8886</td>\n",
       "      <td id=\"T_edd9d_row0_col4\" class=\"data row0 col4\" >0.1913</td>\n",
       "      <td id=\"T_edd9d_row0_col5\" class=\"data row0 col5\" >0.9774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
       "      <td id=\"T_edd9d_row1_col0\" class=\"data row1 col0\" >0.3512</td>\n",
       "      <td id=\"T_edd9d_row1_col1\" class=\"data row1 col1\" >0.2735</td>\n",
       "      <td id=\"T_edd9d_row1_col2\" class=\"data row1 col2\" >0.5229</td>\n",
       "      <td id=\"T_edd9d_row1_col3\" class=\"data row1 col3\" >0.8938</td>\n",
       "      <td id=\"T_edd9d_row1_col4\" class=\"data row1 col4\" >0.1746</td>\n",
       "      <td id=\"T_edd9d_row1_col5\" class=\"data row1 col5\" >0.4637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
       "      <td id=\"T_edd9d_row2_col0\" class=\"data row2 col0\" >0.3414</td>\n",
       "      <td id=\"T_edd9d_row2_col1\" class=\"data row2 col1\" >0.2439</td>\n",
       "      <td id=\"T_edd9d_row2_col2\" class=\"data row2 col2\" >0.4938</td>\n",
       "      <td id=\"T_edd9d_row2_col3\" class=\"data row2 col3\" >0.9071</td>\n",
       "      <td id=\"T_edd9d_row2_col4\" class=\"data row2 col4\" >0.1816</td>\n",
       "      <td id=\"T_edd9d_row2_col5\" class=\"data row2 col5\" >0.9817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
       "      <td id=\"T_edd9d_row3_col0\" class=\"data row3 col0\" >0.3472</td>\n",
       "      <td id=\"T_edd9d_row3_col1\" class=\"data row3 col1\" >0.2385</td>\n",
       "      <td id=\"T_edd9d_row3_col2\" class=\"data row3 col2\" >0.4884</td>\n",
       "      <td id=\"T_edd9d_row3_col3\" class=\"data row3 col3\" >0.9010</td>\n",
       "      <td id=\"T_edd9d_row3_col4\" class=\"data row3 col4\" >0.1794</td>\n",
       "      <td id=\"T_edd9d_row3_col5\" class=\"data row3 col5\" >0.5723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
       "      <td id=\"T_edd9d_row4_col0\" class=\"data row4 col0\" >0.3579</td>\n",
       "      <td id=\"T_edd9d_row4_col1\" class=\"data row4 col1\" >0.2697</td>\n",
       "      <td id=\"T_edd9d_row4_col2\" class=\"data row4 col2\" >0.5193</td>\n",
       "      <td id=\"T_edd9d_row4_col3\" class=\"data row4 col3\" >0.8885</td>\n",
       "      <td id=\"T_edd9d_row4_col4\" class=\"data row4 col4\" >0.1771</td>\n",
       "      <td id=\"T_edd9d_row4_col5\" class=\"data row4 col5\" >0.4655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
       "      <td id=\"T_edd9d_row5_col0\" class=\"data row5 col0\" >0.3287</td>\n",
       "      <td id=\"T_edd9d_row5_col1\" class=\"data row5 col1\" >0.2105</td>\n",
       "      <td id=\"T_edd9d_row5_col2\" class=\"data row5 col2\" >0.4588</td>\n",
       "      <td id=\"T_edd9d_row5_col3\" class=\"data row5 col3\" >0.9157</td>\n",
       "      <td id=\"T_edd9d_row5_col4\" class=\"data row5 col4\" >0.1681</td>\n",
       "      <td id=\"T_edd9d_row5_col5\" class=\"data row5 col5\" >0.4633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "      <td id=\"T_edd9d_row6_col0\" class=\"data row6 col0\" >0.3743</td>\n",
       "      <td id=\"T_edd9d_row6_col1\" class=\"data row6 col1\" >0.4145</td>\n",
       "      <td id=\"T_edd9d_row6_col2\" class=\"data row6 col2\" >0.6439</td>\n",
       "      <td id=\"T_edd9d_row6_col3\" class=\"data row6 col3\" >0.8601</td>\n",
       "      <td id=\"T_edd9d_row6_col4\" class=\"data row6 col4\" >0.1859</td>\n",
       "      <td id=\"T_edd9d_row6_col5\" class=\"data row6 col5\" >0.7934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
       "      <td id=\"T_edd9d_row7_col0\" class=\"data row7 col0\" >0.3339</td>\n",
       "      <td id=\"T_edd9d_row7_col1\" class=\"data row7 col1\" >0.2355</td>\n",
       "      <td id=\"T_edd9d_row7_col2\" class=\"data row7 col2\" >0.4853</td>\n",
       "      <td id=\"T_edd9d_row7_col3\" class=\"data row7 col3\" >0.9062</td>\n",
       "      <td id=\"T_edd9d_row7_col4\" class=\"data row7 col4\" >0.1694</td>\n",
       "      <td id=\"T_edd9d_row7_col5\" class=\"data row7 col5\" >0.7574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
       "      <td id=\"T_edd9d_row8_col0\" class=\"data row8 col0\" >0.3167</td>\n",
       "      <td id=\"T_edd9d_row8_col1\" class=\"data row8 col1\" >0.1973</td>\n",
       "      <td id=\"T_edd9d_row8_col2\" class=\"data row8 col2\" >0.4442</td>\n",
       "      <td id=\"T_edd9d_row8_col3\" class=\"data row8 col3\" >0.9158</td>\n",
       "      <td id=\"T_edd9d_row8_col4\" class=\"data row8 col4\" >0.1568</td>\n",
       "      <td id=\"T_edd9d_row8_col5\" class=\"data row8 col5\" >0.3264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
       "      <td id=\"T_edd9d_row9_col0\" class=\"data row9 col0\" >0.3396</td>\n",
       "      <td id=\"T_edd9d_row9_col1\" class=\"data row9 col1\" >0.2246</td>\n",
       "      <td id=\"T_edd9d_row9_col2\" class=\"data row9 col2\" >0.4739</td>\n",
       "      <td id=\"T_edd9d_row9_col3\" class=\"data row9 col3\" >0.9089</td>\n",
       "      <td id=\"T_edd9d_row9_col4\" class=\"data row9 col4\" >0.1806</td>\n",
       "      <td id=\"T_edd9d_row9_col5\" class=\"data row9 col5\" >0.4219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row10\" class=\"row_heading level0 row10\" >Mean</th>\n",
       "      <td id=\"T_edd9d_row10_col0\" class=\"data row10 col0\" >0.3451</td>\n",
       "      <td id=\"T_edd9d_row10_col1\" class=\"data row10 col1\" >0.2618</td>\n",
       "      <td id=\"T_edd9d_row10_col2\" class=\"data row10 col2\" >0.5087</td>\n",
       "      <td id=\"T_edd9d_row10_col3\" class=\"data row10 col3\" >0.8986</td>\n",
       "      <td id=\"T_edd9d_row10_col4\" class=\"data row10 col4\" >0.1765</td>\n",
       "      <td id=\"T_edd9d_row10_col5\" class=\"data row10 col5\" >0.6223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_edd9d_level0_row11\" class=\"row_heading level0 row11\" >Std</th>\n",
       "      <td id=\"T_edd9d_row11_col0\" class=\"data row11 col0\" >0.0159</td>\n",
       "      <td id=\"T_edd9d_row11_col1\" class=\"data row11 col1\" >0.0596</td>\n",
       "      <td id=\"T_edd9d_row11_col2\" class=\"data row11 col2\" >0.0547</td>\n",
       "      <td id=\"T_edd9d_row11_col3\" class=\"data row11 col3\" >0.0159</td>\n",
       "      <td id=\"T_edd9d_row11_col4\" class=\"data row11 col4\" >0.0094</td>\n",
       "      <td id=\"T_edd9d_row11_col5\" class=\"data row11 col5\" >0.2254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18316915c10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "blender_top4 = blend_models(estimator_list=tuned)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "6258aa5d-4d1a-4372-a93d-d5e22786aca0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "final_model = finalize_model(blender_top4)\n",
    "prediction = predict_model(final_model, data=X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "d9109b02-b2ee-4421-95e9-eff2b6f42eff",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_blend = prediction['prediction_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "577d034b-000a-41ff-a069-f5c8ba108587",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2: 0.920864161753492\n",
      "MSE: 0.21371122830139289\n",
      "MAE: 0.3187236645015551\n"
     ]
    }
   ],
   "source": [
    "r2_blend = r2_score(y_test, y_pred_blend)\n",
    "MSE_blend = mean_squared_error(y_test, y_pred_blend)\n",
    "MAE_blend = mean_absolute_error(y_test, y_pred_blend)\n",
    "MAPE_blend = mean_absolute_percentage_error(y_test, y_pred_blend)\n",
    "\n",
    "print(f\"R2: {r2_blend}\")\n",
    "print(f\"MSE: {MSE_blend}\")\n",
    "print(f\"MAE: {MAE_blend}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbce0c13-f874-478b-bb20-369a55d65f39",
   "metadata": {},
   "source": [
    "# Comparing Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "74512cac-669c-451e-9f85-e6c7e921f0ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x550 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, y_pred_nn, label='Neural Network', color='orange', marker = '.')\n",
    "plt.scatter(y_test, y_pred_xgb, label='XGBoost', color='green', marker = '.')\n",
    "plt.plot(y_test, y_pred_blend, label='Pycaret Blender', color='blue', marker = '.')\n",
    "plt.plot(y_test, y_test, color = '0')\n",
    "\n",
    "plt.xlabel('y_test')\n",
    "plt.ylabel('y_pred')\n",
    "\n",
    "plt.legend()\n",
    "plt.title('Prediction Comparison')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "d0263f24-c7b5-4c0c-aec4-899b41a91b6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "compare = pd.DataFrame([['Regression Tree', r2_tree, MSE_tree, MAE_tree],\n",
    "['Random Forest Regressor', r2_rfr, MSE_rfr, MAE_rfr],\n",
    "['Extra Trees Regressor', r2_etr, MSE_etr, MAE_etr],\n",
    "['Linear Regression', r2_linear, MSE_linear, MAE_linear],\n",
    "['Epsilon-Support Vector Regression', r2_svr, MSE_svr, MAE_svr],\n",
    "['Neural Network', r2_nn, MSE_nn, MAE_nn],\n",
    "['XGBoost', r2_xgb, MSE_xgb, MAE_xgb],\n",
    "['Pycaret', r2_blend, MSE_blend, MAE_blend]], columns = ['Model', 'R2', 'MSE', 'MAE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "64ace5ff-6cff-47e7-80ff-b92ec8ec4afb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>R2</th>\n",
       "      <th>MSE</th>\n",
       "      <th>MAE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Extra Trees Regressor</td>\n",
       "      <td>0.914650</td>\n",
       "      <td>0.230492</td>\n",
       "      <td>0.299241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pycaret</td>\n",
       "      <td>0.920864</td>\n",
       "      <td>0.213711</td>\n",
       "      <td>0.318724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest Regressor</td>\n",
       "      <td>0.906006</td>\n",
       "      <td>0.253836</td>\n",
       "      <td>0.333944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>XGBoost</td>\n",
       "      <td>0.914322</td>\n",
       "      <td>0.231379</td>\n",
       "      <td>0.344959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Regression Tree</td>\n",
       "      <td>0.832830</td>\n",
       "      <td>0.451452</td>\n",
       "      <td>0.411875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Epsilon-Support Vector Regression</td>\n",
       "      <td>0.873258</td>\n",
       "      <td>0.342275</td>\n",
       "      <td>0.427197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Linear Regression</td>\n",
       "      <td>0.795359</td>\n",
       "      <td>0.552645</td>\n",
       "      <td>0.581136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Neural Network</td>\n",
       "      <td>0.783326</td>\n",
       "      <td>0.585140</td>\n",
       "      <td>0.596709</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Model        R2       MSE       MAE\n",
       "2              Extra Trees Regressor  0.914650  0.230492  0.299241\n",
       "7                            Pycaret  0.920864  0.213711  0.318724\n",
       "1            Random Forest Regressor  0.906006  0.253836  0.333944\n",
       "6                            XGBoost  0.914322  0.231379  0.344959\n",
       "0                    Regression Tree  0.832830  0.451452  0.411875\n",
       "4  Epsilon-Support Vector Regression  0.873258  0.342275  0.427197\n",
       "3                  Linear Regression  0.795359  0.552645  0.581136\n",
       "5                     Neural Network  0.783326  0.585140  0.596709"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare.sort_values('MAE')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
